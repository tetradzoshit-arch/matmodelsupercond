import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from io import BytesIO
import base64
from scipy.signal import find_peaks

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ù—ñ–æ–±—ñ—é
e = 1.6e-19  # –ö–ª
m = 9.1e-31  # –∫–≥
Tc = 9.2  # –ö
n0 = 1.0e29  # –º‚Åª¬≥
tau_imp = 5.0e-14  # —Å
A_ph = 3.0e8  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Ñ–æ–Ω–æ–Ω–Ω–æ–≥–æ —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è

def calculate_superconducting_current(t, E_type, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    K = (e**2 * n0) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 + K * E0 * t
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 + K * (a * t**2) / 2
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        return j0 + (K * E0 / omega) * (1 - np.cos(omega * t))

def calculate_normal_current(t, E_type, T, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    ns = n0 * (1 - (T/Tc)**4)
    tau = 1 / (1/tau_imp + A_ph * T**5)
    sigma = (ns * e**2 * tau) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * E0 * tau * (1 - np.exp(-t/tau))
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * a * E0 * tau**2 * (1 - np.exp(-t/tau))
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        phase_shift = np.arctan(omega * tau)
        amplitude = (sigma * E0 * tau) / np.sqrt(1 + (omega * tau)**2)
        transient = j0 * np.exp(-t/tau)
        return transient + amplitude * np.sin(omega * t - phase_shift)

def analyze_current_characteristics(t, j_super, j_normal, field_type, T, omega=1.0):
    """–ê–Ω–∞–ª—ñ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å—Ç—Ä—É–º—É –¥–ª—è –æ–±–æ—Ö —Å—Ç–∞–Ω—ñ–≤"""
    analyses = []
    
    for j_data, state_name in [(j_super, "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫"), (j_normal, "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª")]:
        analysis = {}
        analysis['–°—Ç–∞–Ω'] = state_name
        analysis['–¢–∏–ø –ø–æ–ª—è'] = field_type
        
        # –û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        analysis['–ö—ñ–Ω—Ü–µ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è j(t)'] = f"{j_data[-1]:.2e} –ê/–º¬≤"
        analysis['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è'] = f"{np.max(j_data):.2e} –ê/–º¬≤"
        analysis['–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è'] = f"{np.min(j_data):.2e} –ê/–º¬≤"
        
        # –ê–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∑–∞ —Ç–∏–ø–æ–º –ø–æ–ª—è
        if field_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
            if state_name == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–õ—ñ–Ω—ñ–π–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è"
                analysis['–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è'] = f"{(j_data[-1] - j_data[0]) / t[-1]:.2e} –ê/–º¬≤—Å"
            else:
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è"
                analysis['–°—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π —Å—Ç–∞–Ω'] = "–î–æ—Å—è–≥–∞—î—Ç—å—Å—è"
                
        elif field_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
            if state_name == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è"
            else:
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è"
                
        elif field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
            if state_name == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–ö–æ–ª–∏–≤–∞–Ω–Ω—è –∑ –ø–æ—Å—Ç—ñ–π–Ω–æ—é –∞–º–ø–ª—ñ—Ç—É–¥–æ—é"
                analysis['–§–∞–∑–æ–≤–∏–π –∑—Å—É–≤'] = "œÄ/2"
            else:
                # –î–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                ns = n0 * (1 - (T/Tc)**4)
                tau_val = 1 / (1/tau_imp + A_ph * T**5)
                analysis['–ü–æ–≤–µ–¥—ñ–Ω–∫–∞'] = "–ó–∞—Ç—É—Ö–∞—é—á—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è"
                analysis['–§–∞–∑–æ–≤–∏–π –∑—Å—É–≤'] = f"{np.arctan(omega * tau_val):.3f} —Ä–∞–¥"
                analysis['–ê–º–ø–ª—ñ—Ç—É–¥–∞'] = f"{np.std(j_data[len(j_data)//2:]) * np.sqrt(2):.2e} –ê/–º¬≤"
        
        # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        analysis['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] = f"{T} K"
        
        analyses.append(analysis)
    
    return analyses

def analyze_graph_mathematics(t, j_data, state_name, field_type):
    """–î–û–î–ê–¢–ö–û–í–ò–ô –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–∫–∞: –µ–∫—Å—Ç—Ä–µ–º—É–º–∏, –ø–æ—Ö—ñ–¥–Ω—ñ"""
    analysis = {}
    analysis['–°—Ç–∞–Ω'] = state_name
    
    # –û—Å–Ω–æ–≤–Ω—ñ –º–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    analysis['j(0)'] = f"{j_data[0]:.2e} –ê/–º¬≤"
    analysis['j(t_max)'] = f"{j_data[-1]:.2e} –ê/–º¬≤"
    analysis['–ú–∞–∫—Å–∏–º—É–º'] = f"{np.max(j_data):.2e} –ê/–º¬≤"
    analysis['–ú—ñ–Ω—ñ–º—É–º'] = f"{np.min(j_data):.2e} –ê/–º¬≤"
    analysis['–†–æ–∑–º–∞—Ö'] = f"{np.max(j_data) - np.min(j_data):.2e} –ê/–º¬≤"
    
    # –ü–æ—Ö—ñ–¥–Ω–∞ (—à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–∏)
    dj_dt = np.gradient(j_data, t)
    analysis['–ú–∞–∫—Å. —à–≤–∏–¥–∫—ñ—Å—Ç—å'] = f"{np.max(dj_dt):.2e} –ê/–º¬≤—Å"
    analysis['–ú—ñ–Ω. —à–≤–∏–¥–∫—ñ—Å—Ç—å'] = f"{np.min(dj_dt):.2e} –ê/–º¬≤—Å"
    analysis['–ö—ñ–Ω—Ü–µ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å'] = f"{dj_dt[-1]:.2e} –ê/–º¬≤—Å"
    
    # –ï–∫—Å—Ç—Ä–µ–º—É–º–∏
    peaks, _ = find_peaks(j_data, height=np.max(j_data)*0.1, distance=10)
    valleys, _ = find_peaks(-j_data, height=-np.min(j_data)*0.1, distance=10)
    
    analysis['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞–∫—Å–∏–º—É–º—ñ–≤'] = len(peaks)
    analysis['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω—ñ–º—É–º—ñ–≤'] = len(valleys)
    
    if len(peaks) > 0:
        analysis['–ß–∞—Å –ø–µ—Ä—à–æ–≥–æ –º–∞–∫—Å–∏–º—É–º—É'] = f"{t[peaks[0]]:.2f} —Å"
    if len(valleys) > 0:
        analysis['–ß–∞—Å –ø–µ—Ä—à–æ–≥–æ –º—ñ–Ω—ñ–º—É–º—É'] = f"{t[valleys[0]]:.2f} —Å"
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä —Ñ—É–Ω–∫—Ü—ñ—ó
    if field_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        if state_name == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
            analysis['–¢–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó'] = "–õ—ñ–Ω—ñ–π–Ω–∞"
            analysis['–ö—É—Ç–æ–≤–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç'] = f"{(j_data[-1] - j_data[0]) / t[-1]:.2e}"
        else:
            analysis['–¢–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó'] = "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞"
            
    elif field_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        if state_name == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
            analysis['–¢–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó'] = "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞"
        else:
            analysis['–¢–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó'] = "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∞"
            
    elif field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        analysis['–¢–∏–ø —Ñ—É–Ω–∫—Ü—ñ—ó'] = "–ö–æ–ª–∏–≤–∞–ª—å–Ω–∞"
        if len(j_data) > 10:
            amplitude = (np.max(j_data) - np.min(j_data)) / 2
            analysis['–ê–º–ø–ª—ñ—Ç—É–¥–∞'] = f"{amplitude:.2e} –ê/–º¬≤"
    
    # –ú–æ–Ω–æ—Ç–æ–Ω–Ω—ñ—Å—Ç—å
    increasing = np.all(dj_dt >= -1e-10)  # –ó —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ö–∏–±–∫–∏ –æ–±—á–∏—Å–ª–µ–Ω—å
    decreasing = np.all(dj_dt <= 1e-10)
    
    if increasing:
        analysis['–ú–æ–Ω–æ—Ç–æ–Ω–Ω—ñ—Å—Ç—å'] = "–ó—Ä–æ—Å—Ç–∞—é—á–∞"
    elif decreasing:
        analysis['–ú–æ–Ω–æ—Ç–æ–Ω–Ω—ñ—Å—Ç—å'] = "–°–ø–∞–¥–Ω–∞"
    else:
        analysis['–ú–æ–Ω–æ—Ç–æ–Ω–Ω—ñ—Å—Ç—å'] = "–ù–µ–º–æ–Ω–æ—Ç–æ–Ω–Ω–∞"
    
    return analysis

def create_pdf_report(data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑–≤—ñ—Ç—É"""
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfgen import canvas
        from reportlab.pdfbase import pdfmetrics
        from reportlab.pdfbase.ttfonts import TTFont
        import io
        
        buffer = io.BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
            font_name = 'DejaVuSans'
        except:
            font_name = 'Helvetica'
        
        pdf.setFont(font_name, 16)
        pdf.drawString(100, 800, "–ó–í–Ü–¢ –ó –ú–û–î–ï–õ–Æ–í–ê–ù–ù–Ø –°–¢–†–£–ú–£")
        
        pdf.setFont(font_name, 12)
        y_position = 750
        
        pdf.drawString(100, y_position, "–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è:")
        y_position -= 20
        pdf.drawString(120, y_position, f"- –¢–∏–ø –ø–æ–ª—è: {data['field_type']}")
        y_position -= 20
        pdf.drawString(120, y_position, f"- –ù–∞–ø—Ä—É–∂–µ–Ω—ñ—Å—Ç—å –ø–æ–ª—è E: {data['E0']} –í/–º")
        y_position -= 20
        pdf.drawString(120, y_position, f"- –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º j: {data['j0']} –ê/–º¬≤")
        y_position -= 20
        pdf.drawString(120, y_position, f"- –ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è: {data['t_max']} —Å")
        y_position -= 20
        pdf.drawString(120, y_position, f"- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.get('T_common', 'N/A')} K")
        
        pdf.save()
        buffer.seek(0)
        return buffer
        
    except Exception as e:
        buffer = BytesIO()
        report_text = f"""
        –ó–í–Ü–¢ –ó –ú–û–î–ï–õ–Æ–í–ê–ù–ù–Ø –°–¢–†–£–ú–£
        
        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è:
        - –¢–∏–ø –ø–æ–ª—è: {data['field_type']}
        - –ù–∞–ø—Ä—É–∂–µ–Ω—ñ—Å—Ç—å –ø–æ–ª—è E: {data['E0']} –í/–º
        - –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º j: {data['j0']} –ê/–º¬≤
        - –ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è: {data['t_max']} —Å
        - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data.get('T_common', 'N/A')} K
        """
        buffer.write(report_text.encode('utf-8'))
        buffer.seek(0)
        return buffer

def main():
    st.set_page_config(page_title="–ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É", layout="wide")
    st.title("üéõÔ∏è –ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É: –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ vs –∑–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª")
    
    if 'saved_plots' not in st.session_state:
        st.session_state.saved_plots = []
    
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
        
        comparison_mode = st.radio(
            "–†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
            ["–û–¥–∏–Ω —Å—Ç–∞–Ω", "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", "–ö—ñ–ª—å–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"]
        )
        
        st.subheader("–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        field_type = st.selectbox("–¢–∏–ø –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–æ–≥–æ –ø–æ–ª—è:", ["–°—Ç–∞—Ç–∏—á–Ω–µ", "–õ—ñ–Ω—ñ–π–Ω–µ", "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ"])
        E0 = st.slider("–ù–∞–ø—Ä—É–∂–µ–Ω—ñ—Å—Ç—å –ø–æ–ª—è E‚ÇÄ (–í/–º)", 0.1, 10.0, 1.0, 0.1)
        j0 = st.slider("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º j‚ÇÄ (–ê/–º¬≤)", 0.0, 10.0, 0.0, 0.1)
        t_max = st.slider("–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è (—Å)", 0.1, 10.0, 5.0, 0.1)
        
        if field_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
            a = st.slider("–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ—Å—Ç—É –ø–æ–ª—è a", 0.1, 5.0, 1.0, 0.1)
        else:
            a = 1.0
            
        if field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
            omega = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ œâ (—Ä–∞–¥/—Å)", 0.1, 10.0, 1.0, 0.1)
        else:
            omega = 1.0
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç–∞–Ω—ñ–≤")
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            T_common = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (K)", 0.1, 15.0, 4.2, 0.1)
            current_temp = T_common
        elif comparison_mode == "–û–¥–∏–Ω —Å—Ç–∞–Ω":
            selected_state = st.radio("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω:", ["–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫", "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª"])
            if selected_state == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                T_super = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞ (K)", 0.1, Tc-0.1, 4.2, 0.1)
                current_temp = T_super
            else:
                T_normal = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É (K)", 0.1, 15.0, 4.2, 0.1)
                current_temp = T_normal
        else:
            T_multi = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (K)", 0.1, 15.0, 4.2, 0.1)
            current_temp = T_multi
        
        if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"):
            current_params = {
                'field_type': field_type,
                'E0': E0,
                'j0': j0,
                't_max': t_max,
                'label': f"{field_type}, E‚ÇÄ={E0}, T={current_temp}K"
            }
            st.session_state.saved_plots.append(current_params)
            st.success("–ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"):
            st.session_state.saved_plots = []
            st.success("–í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—á–∏—â–µ–Ω–æ!")

    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Å—Ç—Ä—É–º—É")
        
        t_extended = np.linspace(0, t_max * 2, 2000)
        t_visible = np.linspace(0, t_max, 1000)
        
        fig = go.Figure()
        
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            j_super_ext = calculate_superconducting_current(t_extended, field_type, E0, a, omega, j0)
            j_normal_ext = calculate_normal_current(t_extended, field_type, T_common, E0, a, omega, j0)
            
            fig.add_trace(go.Scatter(x=t_extended, y=j_super_ext, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', 
                                   line=dict(color='red', width=3)))
            fig.add_trace(go.Scatter(x=t_extended, y=j_normal_ext, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª',
                                   line=dict(color='blue', width=3)))
            
            # –ü–û–ü–ï–†–ï–î–ù–Ü–ô –ê–ù–ê–õ–Ü–ó (—è–∫ –±—É–ª–æ)
            j_super_vis = calculate_superconducting_current(t_visible, field_type, E0, a, omega, j0)
            j_normal_vis = calculate_normal_current(t_visible, field_type, T_common, E0, a, omega, j0)
            analyses = analyze_current_characteristics(t_visible, j_super_vis, j_normal_vis, field_type, T_common, omega)
            
            # –î–û–î–ê–¢–ö–û–í–ò–ô –ú–ê–¢–ï–ú–ê–¢–ò–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó
            math_analysis_super = analyze_graph_mathematics(t_visible, j_super_vis, "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫", field_type)
            math_analysis_normal = analyze_graph_mathematics(t_visible, j_normal_vis, "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª", field_type)
            
        elif comparison_mode == "–û–¥–∏–Ω —Å—Ç–∞–Ω":
            if 'T_super' in locals():
                j_super_ext = calculate_superconducting_current(t_extended, field_type, E0, a, omega, j0)
                fig.add_trace(go.Scatter(x=t_extended, y=j_super_ext, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫',
                                       line=dict(color='red', width=3)))
            else:
                j_normal_ext = calculate_normal_current(t_extended, field_type, T_normal, E0, a, omega, j0)
                fig.add_trace(go.Scatter(x=t_extended, y=j_normal_ext, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª',
                                       line=dict(color='blue', width=3)))
        
        else:
            j_super_ext = calculate_superconducting_current(t_extended, field_type, E0, a, omega, j0)
            j_normal_ext = calculate_normal_current(t_extended, field_type, T_multi, E0, a, omega, j0)
            
            fig.add_trace(go.Scatter(x=t_extended, y=j_super_ext, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ (–ø–æ—Ç–æ—á–Ω–∏–π)',
                                   line=dict(color='red', width=3)))
            fig.add_trace(go.Scatter(x=t_extended, y=j_normal_ext, name='–ó–≤–∏—á–∞–π–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π)',
                                   line=dict(color='blue', width=3)))
            
            for i, saved_plot in enumerate(st.session_state.saved_plots):
                j_super_saved = calculate_superconducting_current(t_extended, saved_plot['field_type'], 
                                                                saved_plot['E0'], a, omega, saved_plot['j0'])
                fig.add_trace(go.Scatter(x=t_extended, y=j_super_saved, name=f'–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ {i+1}',
                                       line=dict(dash='dash')))
        
        fig.update_layout(
            title="–î–∏–Ω–∞–º—ñ–∫–∞ –≥—É—Å—Ç–∏–Ω–∏ —Å—Ç—Ä—É–º—É",
            xaxis_title="–ß–∞—Å (—Å)",
            yaxis_title="–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)",
            height=500,
            xaxis=dict(range=[0, t_max]),
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # –ü–û–ü–ï–†–ï–î–ù–Ø –¢–ê–ë–õ–ò–¶–Ø –ê–ù–ê–õ–Ü–ó–£ (—è–∫ –±—É–ª–æ)
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            st.subheader("üìä –ê–Ω–∞–ª—ñ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å—Ç—Ä—É–º—É")
            
            analysis_df = pd.DataFrame(analyses)
            st.dataframe(
                analysis_df,
                use_container_width=True,
                hide_index=True,
                height=200
            )
            
            # –î–û–î–ê–¢–ö–û–í–ê –¢–ê–ë–õ–ò–¶–Ø –ú–ê–¢–ï–ú–ê–¢–ò–ß–ù–û–ì–û –ê–ù–ê–õ–Ü–ó–£
            st.subheader("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
            
            col_math1, col_math2 = st.columns(2)
            
            with col_math1:
                st.write("**–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫:**")
                math_df_super = pd.DataFrame([math_analysis_super])
                st.dataframe(
                    math_df_super.T.rename(columns={0: '–ó–Ω–∞—á–µ–Ω–Ω—è'}),
                    use_container_width=True,
                    height=400
                )
            
            with col_math2:
                st.write("**–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª:**")
                math_df_normal = pd.DataFrame([math_analysis_normal])
                st.dataframe(
                    math_df_normal.T.rename(columns={0: '–ó–Ω–∞—á–µ–Ω–Ω—è'}),
                    use_container_width=True,
                    height=400
                )
        
        # –ì–†–ê–§–Ü–ö –ê–ú–ü–õ–Ü–¢–£–î–ê-–ß–ê–°–¢–û–¢–ê (—è–∫ –±—É–ª–æ)
        if field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" and comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            with st.expander("üì° –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", expanded=False):
                st.subheader("–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –∞–º–ø–ª—ñ—Ç—É–¥–∏ —Å—Ç—Ä—É–º—É –≤—ñ–¥ —á–∞—Å—Ç–æ—Ç–∏")
                
                frequencies = np.logspace(-1, 2, 100)
                amplitudes_super = []
                amplitudes_normal = []
                
                for freq in frequencies:
                    K = (e**2 * n0) / m
                    amp_super = (K * E0) / freq
                    amplitudes_super.append(amp_super)
                    
                    ns = n0 * (1 - (T_common/Tc)**4)
                    tau = 1 / (1/tau_imp + A_ph * T_common**5)
                    sigma = (ns * e**2 * tau) / m
                    amp_normal = (sigma * E0 * tau) / np.sqrt(1 + (freq * tau)**2)
                    amplitudes_normal.append(amp_normal)
                
                fig_freq = go.Figure()
                fig_freq.add_trace(go.Scatter(x=frequencies, y=amplitudes_super, 
                                            name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', line=dict(color='red')))
                fig_freq.add_trace(go.Scatter(x=frequencies, y=amplitudes_normal,
                                            name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª', line=dict(color='blue')))
                fig_freq.update_layout(
                    xaxis_title="–ß–∞—Å—Ç–æ—Ç–∞ œâ (—Ä–∞–¥/—Å)",
                    yaxis_title="–ê–º–ø–ª—ñ—Ç—É–¥–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)",
                    xaxis_type="log",
                    yaxis_type="log",
                    height=300
                )
                st.plotly_chart(fig_freq, use_container_width=True)

    with col2:
        st.header("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è")
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
        st.write(f"**–¢–∏–ø –ø–æ–ª—è:** {field_type}")
        st.write(f"**E‚ÇÄ =** {E0} –í/–º")
        st.write(f"**j‚ÇÄ =** {j0} –ê/–º¬≤")
        st.write(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {current_temp} K")
        
        if current_temp < Tc:
            st.success("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂—á–µ T–∫—Ä–∏—Ç")
        else:
            st.warning("‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—â–µ T–∫—Ä–∏—Ç")

        st.header("üìÑ –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        if st.button("üì• –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF –∑–≤—ñ—Ç", use_container_width=True):
            report_data = {
                'field_type': field_type,
                'E0': E0,
                'j0': j0,
                't_max': t_max,
                'T_common': current_temp,
            }
            
            pdf_buffer = create_pdf_report(report_data)
            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF –∑–≤—ñ—Ç",
                data=pdf_buffer,
                file_name="–∑–≤—ñ—Ç_–º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è_—Å—Ç—Ä—É–º—É.pdf",
                mime="application/pdf",
                use_container_width=True
            )

    # –ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ê –¢–ê–ë–õ–ò–¶–Ø –í–õ–ê–°–¢–ò–í–û–°–¢–ï–ô (—è–∫ –±—É–ª–æ)
    st.header("üìã –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π")
    with st.expander("üéØ –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", expanded=True):
        comparison_data = {
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": [
                "–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ —Å—Ç—Ä—É–º—É –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–º—É –ø–æ–ª—ñ", 
                "–ù–∞—è–≤–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É",
                "–§–∞–∑–æ–≤–∏–π –∑—Å—É–≤ —É –∑–º—ñ–Ω–Ω–æ–º—É –ø–æ–ª—ñ", 
                "–°—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π —Å—Ç–∞–Ω",
                "–ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó",
            ],
            "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫": [
                "–ù–µ–æ–±–º–µ–∂–µ–Ω–µ –ª—ñ–Ω—ñ–π–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è",
                "–í—ñ–¥—Å—É—Ç–Ω—ñ–π", 
                "œÄ/2 (90¬∞)",
                "–ù–µ –¥–æ—Å—è–≥–∞—î—Ç—å—Å—è",
                "–ù–µ –≤–∏–∑–Ω–∞—á–∞—î –¥–∏–Ω–∞–º—ñ–∫—É",
            ],
            "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª": [
                "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è",
                "–ü—Ä–∏—Å—É—Ç–Ω—ñ–π",
                "arctg(œâœÑ) - –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —á–∞—Å—Ç–æ—Ç–∏", 
                "–î–æ—Å—è–≥–∞—î—Ç—å—Å—è (j = œÉE)",
                "–ö–ª—é—á–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
            ]
        }
        
        df = pd.DataFrame(comparison_data)
        st.dataframe(df, use_container_width=True, hide_index=True, height=300)

    # –î–û–í–Ü–î–ö–ê (—è–∫ –±—É–ª–æ)
    st.header("üìñ –î–æ–≤—ñ–¥–∫–∞")
    col_info1, col_info2 = st.columns(2)
    
    with col_info1:
        with st.expander("üî¨ –§—ñ–∑–∏—á–Ω—ñ –æ—Å–Ω–æ–≤–∏ –º–æ–¥–µ–ª—ñ", expanded=False):
            st.write("""
            **–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω (—Ä—ñ–≤–Ω—è–Ω–Ω—è –õ–æ–Ω–¥–æ–Ω—ñ–≤):**
            - –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É
            - –ù–µ–æ–±–º–µ–∂–µ–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É –ø–æ–ª—ñ
            - –§–∞–∑–æ–≤–∏–π –∑—Å—É–≤ œÄ/2 —É –∑–º—ñ–Ω–Ω–æ–º—É –ø–æ–ª—ñ
            
            **–ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω (–º–æ–¥–µ–ª—å –î—Ä—É–¥–µ):**
            - –ù–∞—è–≤–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É —á–µ—Ä–µ–∑ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
            - –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è —Å—Ç—Ä—É–º—É
            - –ß–∞—Å—Ç–æ—Ç–Ω–æ-–∑–∞–ª–µ–∂–Ω–∏–π —Ñ–∞–∑–æ–≤–∏–π –∑—Å—É–≤
            """)
    
    with col_info2:
        with st.expander("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –º–æ–¥–µ–ª—ñ", expanded=False):
            st.write("""
            **–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫:** 
            ```python
            dj/dt = (e¬≤n‚Çõ/m)E(t)
            ```
            
            **–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª:** 
            ```python
            dj/dt + j/œÑ = (œÉ/œÑ)E(t)
            ```
            """)

if __name__ == "__main__":
    main()
