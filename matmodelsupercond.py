import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# --- –í–õ–ê–°–ù–ê –§–£–ù–ö–¶–Ü–Ø FIND_PEAKS –ë–ï–ó SCIPY ---
def find_peaks_simple(signal, prominence=0.1):
    """–ü—Ä–æ—Å—Ç–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ—à—É–∫—É –ø—ñ–∫—ñ–≤"""
    peaks = []
    max_val = np.max(signal)
    threshold = prominence * max_val
    
    for i in range(1, len(signal)-1):
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
        if signal[i] > signal[i-1] and signal[i] > signal[i+1]:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏—â–µ –ø–æ—Ä–æ–≥—É
            if signal[i] > threshold:
                peaks.append(i)
    
# --- –§–Ü–ó–ò–ß–ù–Ü –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –ù–Ü–û–ë–Ü–Æ ---
E_CHARGE = 1.6e-19
M_ELECTRON = 9.1e-31
N_0 = 5.0e28              # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –¥–ª—è Nb: ~5√ó10¬≤‚Å∏ –º‚Åª¬≥
T_C = 9.2                 # –ö—Ä–∏—Ç–∏—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ Nb

# –ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó –¥–ª—è Nb –ø—Ä–∏ –Ω–∏–∑—å–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö:
TAU_IMP = 5.0e-13         # –î–ª—è —á–∏—Å—Ç–æ–≥–æ Nb –ø—Ä–∏ T < 10K
A_PHONON = 1.0e7          # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–ª—è —Ñ–æ–Ω–æ–Ω–Ω–æ–≥–æ —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---
def tau_temperature_dependence(T):
    """–†–µ–∞–ª—å–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —á–∞—Å—É —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó –¥–ª—è –Ω—ñ–æ–±—ñ—é"""
    if T <= 4.2:  # –î–ª—è –≥–µ–ª—ñ—î–≤–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        return 5.0e-13  # –ß–∏—Å—Ç–∏–π Nb –ø—Ä–∏ 4.2K
    elif T <= 10:
        return 3.0e-13  # –¢—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –ø—Ä–∏ 10K
    else:
        # –ü—Ä–∏ –±—ñ–ª—å—à –≤–∏—Å–æ–∫–∏—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞—Ö
        scattering_rate = (1 / 5.0e-13) + (1.0e7 * T**5)
        return 1.0 / scattering_rate

def analyze_current_direct(t_array, j_array, field_type, model_name, is_superconductor):
    """–ü—Ä—è–º–∏–π –∞–Ω–∞–ª—ñ–∑ –∫—Ä–∏–≤–æ—ó —Å—Ç—Ä—É–º—É –±–µ–∑ –ª—ñ–Ω—ñ–π–Ω–æ—ó —Ä–µ–≥—Ä–µ—Å—ñ—ó"""
    analysis = {}
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analysis['max_current'] = np.max(j_array)
    analysis['min_current'] = np.min(j_array)
    analysis['mean_current'] = np.mean(j_array)
    analysis['final_current'] = j_array[-1]
    
    # –ß–∞—Å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º—É
    max_index = np.argmax(j_array)
    analysis['time_to_max'] = t_array[max_index]
    
    # –ê–ù–ê–õ–Ü–¢–ò–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó –î–õ–Ø –ö–û–ñ–ù–û–ì–û –¢–ò–ü–£ –ü–û–õ–Ø
    if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in field_type:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞—à—É –≤–ª–∞—Å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑–∞–º—ñ—Å—Ç—å scipy
        peaks = find_peaks_simple(j_array, prominence=0.1)
        valleys = find_peaks_simple(-j_array, prominence=0.1)
        
        analysis['peaks_count'] = len(peaks)
        if len(peaks) >= 2:
            # –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—ñ–æ–¥—É
            periods = np.diff(t_array[peaks])
            analysis['period'] = np.mean(periods)
            analysis['frequency_hz'] = 1.0 / analysis['period'] if analysis['period'] > 0 else 0
            analysis['frequency_mhz'] = analysis['frequency_hz'] * 1e-6
            
            # –ë–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–º–ø–ª—ñ—Ç—É–¥–∏
            if len(valleys) > 0:
                analysis['amplitude'] = (np.max(j_array[peaks]) - np.min(j_array[valleys])) / 2
            else:
                analysis['amplitude'] = np.max(j_array[peaks])
        else:
            analysis['period'] = 0
            analysis['frequency_mhz'] = 0
            analysis['amplitude'] = 0
            
    elif "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
        # –ê–Ω–∞–ª—ñ–∑ —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –ø–æ–ª—è
        final_val = j_array[-1]
        if final_val != 0:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–ª–∏ —Å—Ç—Ä—É–º —Å—Ç–∞–±—ñ–ª—ñ–∑—É–≤–∞–≤—Å—è –≤ –º–µ–∂–∞—Ö 2%
            settling_threshold = 0.02 * abs(final_val)
            for i in range(len(j_array)-1, 0, -1):
                if abs(j_array[i] - final_val) > settling_threshold:
                    analysis['settling_time'] = t_array[i+1] if i+1 < len(t_array) else t_array[-1]
                    break
            else:
                analysis['settling_time'] = t_array[0]
        else:
            analysis['settling_time'] = 0
            
    elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
        if is_superconductor:
            # –î–ª—è –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞: j(t) = j‚ÇÄ + ¬ΩK¬∑a¬∑t¬≤
            # –®—É–∫–∞—î–º–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
            if len(t_array) > 1 and np.max(t_array) > 0:
                # –û–±—á–∏—Å–ª—é—î–º–æ —Ñ–∞–∫—Ç–∏—á–Ω–µ –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
                t_mid = t_array[len(t_array)//2]
                j_mid = j_array[len(j_array)//2]
                if t_mid > 0:
                    analysis['quadratic_coeff'] = (j_mid - j_array[0]) / (t_mid**2)
                else:
                    analysis['quadratic_coeff'] = 0
            else:
                analysis['quadratic_coeff'] = 0
        else:
            # –î–ª—è –º–µ—Ç–∞–ª—É: —Å–∫–ª–∞–¥–Ω—ñ—à–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è –≤ –∫—ñ–Ω—Ü–µ–≤—ñ–π —Ç–æ—á—Ü—ñ
            if len(j_array) > 10:
                last_slope = (j_array[-1] - j_array[-10]) / (t_array[-1] - t_array[-10])
                analysis['final_growth_rate'] = last_slope
            else:
                analysis['final_growth_rate'] = 0
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    analysis['dynamic_range'] = analysis['max_current'] - analysis['min_current']
    analysis['overshoot'] = analysis['max_current'] - analysis['final_current'] if analysis['max_current'] > analysis['final_current'] else 0
    
    return analysis

def create_comparison_table(simulation_runs):
    """–°—Ç–≤–æ—Ä—é—î –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é –≤—Å—ñ—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    table_data = []
    
    for i, run in enumerate(simulation_runs):
        is_superconductor = run['state'] == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫"
        analysis = analyze_current_direct(
            run['T_array'], 
            run['J_array'], 
            run['field_type'],
            run['model'],
            is_superconductor
        )
        
        # –ë–∞–∑–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        row = {
            '‚Ññ': i + 1,
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': f"{run['T']} K",
            '–°—Ç–∞–Ω': run['state'],
            '–ú–æ–¥–µ–ª—å': run['model'],
            '–ü–æ–ª–µ': run['field_type'].split(':')[0],
            '–ú–∞–∫—Å. —Å—Ç—Ä—É–º': f"{analysis['max_current']:.2e} –ê/–º¬≤",
            '–ö—ñ–Ω—Ü. —Å—Ç—Ä—É–º': f"{analysis['final_current']:.2e} –ê/–º¬≤",
        }
        
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–ª—è
        if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in run['field_type']:
            row['–ê–º–ø–ª—ñ—Ç—É–¥–∞'] = f"{analysis['amplitude']:.2e} –ê/–º¬≤" if 'amplitude' in analysis else "N/A"
            row['–ß–∞—Å—Ç–æ—Ç–∞'] = f"{analysis['frequency_mhz']:.1f} –ú–ì—Ü" if 'frequency_mhz' in analysis else "N/A"
            row['–ü–µ—Ä—ñ–æ–¥–∏'] = f"{analysis['peaks_count']}" if 'peaks_count' in analysis else "N/A"
            
        elif "–ü–æ—Å—Ç—ñ–π–Ω–µ" in run['field_type']:
            row['–ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è'] = f"{analysis['settling_time']:.1f} –Ω—Å" if 'settling_time' in analysis else "N/A"
            row['–ü–µ—Ä–µ—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è'] = f"{analysis['overshoot']:.2e} –ê/–º¬≤" if analysis['overshoot'] > 0 else "–ù–µ–º–∞—î"
            
        elif "–õ—ñ–Ω—ñ–π–Ω–µ" in run['field_type']:
            if is_superconductor:
                row['–ö–≤–∞–¥—Ä–∞—Ç. –∫–æ–µ—Ñ.'] = f"{analysis['quadratic_coeff']:.2e}" if 'quadratic_coeff' in analysis else "N/A"
            else:
                row['–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç.'] = f"{analysis['final_growth_rate']:.2e}" if 'final_growth_rate' in analysis else "N/A"
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
        row['–ß–∞—Å –¥–æ –º–∞–∫—Å.'] = f"{analysis['time_to_max']:.1f} –Ω—Å"
        row['–î–∏–Ω–∞–º. –¥—ñ–∞–ø–∞–∑–æ–Ω'] = f"{analysis['dynamic_range']:.2e} –ê/–º¬≤"
        
        table_data.append(row)
    
    return pd.DataFrame(table_data)

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ---
if 'simulation_runs' not in st.session_state:
    st.session_state.simulation_runs = []

# --- –°–ê–ô–î–ë–ê–† –î–õ–Ø –í–í–û–î–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ---
with st.sidebar:
    st.header("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
    
    # –í–∏–±—ñ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    T = st.slider("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ T (K)", 0.1, 20.0, 4.2, 0.1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_superconductor = (T < T_C)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É
    metal_model = None
    if is_superconductor:
        st.success(f"‚ö° –ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω: T={T}K < T_c={T_C}K")
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –õ–æ–Ω–¥–æ–Ω—ñ–≤ K
        N_S = N_0 * (1.0 - (T / T_C) ** 4.0)
        K_COEFF = (N_S * E_CHARGE**2) / M_ELECTRON
        st.metric("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç $K$", f"{K_COEFF:.2e} $A/(V \\cdot m \\cdot s)$")
    else:
        st.info(f"üîå –ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª: T={T}K $\\ge$ T_c={T_C}K")
        metal_model = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –º–µ—Ç–∞–ª—É:", 
                                   ["–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)", 
                                    "–ó–∞–∫–æ–Ω –û–º–∞ (—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π)"])
        tau_T_current = tau_temperature_dependence(T)
        SIGMA_COEFF = (N_0 * E_CHARGE**2 * tau_T_current) / M_ELECTRON
        st.metric("–ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó $\\tau(T)$", f"{tau_T_current:.2e} —Å")
        st.metric("–ü—Ä–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å $\\sigma$", f"{SIGMA_COEFF:.2e} –°–º/–º")
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫
    J_0 = st.number_input("‚û°Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≥—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j_0$ (–ê/–º¬≤)", 
                          min_value=0.0, max_value=1e11, value=0.0, step=1e6)
    
    # –¢–∏–ø –ø–æ–ª—è
    st.subheader("üìä –¢–∏–ø –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ø–æ–ª—è")
    field_type = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ª—è:", 
                              ["–ü–æ—Å—Ç—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = E‚ÇÄ", 
                               "–õ—ñ–Ω—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = a ¬∑ t", 
                               "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ: E(t) = E‚ÇÄ ¬∑ sin(œât)"])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–ª—è
    E_0, A, OMEGA = None, None, None
    if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
        E_0 = st.number_input("E‚ÇÄ (–í/–º)", 0.0, 1e4, 1e3, 100.0)
    elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
        A = st.number_input("–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è 'a' (–í/(–º¬∑—Å))", 1e8, 1e12, 1e10, 1e9)
    else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
        E_0 = st.number_input("–ê–º–ø–ª—ñ—Ç—É–¥–∞ E‚ÇÄ (–í/–º)", 0.0, 1e4, 5000.0, 100.0)  # –ó–ë–Ü–õ–¨–®–ï–ù–û –¥–æ 5000 –í/–º
        F = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ f (–∫–ì—Ü)", 1, 10000, 100, 10)  # –ó–ú–Ü–ù–ï–ù–û –Ω–∞ –∫–ì—Ü
        OMEGA = 2.0 * np.pi * F * 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∫–ì—Ü –≤ –ì—Ü

    # –ß–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª
    st.subheader("‚è∞ –ß–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª")
    TIME_END = st.selectbox("–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è", 
                           ["1 –Ω—Å", "10 –Ω—Å", "100 –Ω—Å", "1 –º–∫—Å", "10 –º–∫—Å", "100 –º–∫—Å", "1 –º—Å"],
                           index=4)  # –ó–ú–Ü–ù–ï–ù–û –Ω–∞ 10 –º–∫—Å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    time_dict = {"1 –Ω—Å": 1e-9, "10 –Ω—Å": 10e-9, "100 –Ω—Å": 100e-9, 
                 "1 –º–∫—Å": 1e-6, "10 –º–∫—Å": 10e-6, "100 –º–∫—Å": 100e-6, "1 –º—Å": 1e-3}
    T_END_UNIFIED = time_dict[TIME_END]

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    st.subheader("üìà –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏") 
    
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"):
        T_ARRAY = np.linspace(0.0, T_END_UNIFIED, 1000)
        J_ARRAY = np.zeros_like(T_ARRAY)
        formula_label = ""
        
        # --- –†–û–ó–†–ê–•–£–ù–û–ö –°–¢–†–£–ú–£ ---
        if is_superconductor:
            if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                J_ARRAY = J_0 + K_COEFF * E_0 * T_ARRAY
                formula_label = r'$j(t) = j_0 + K E_0 t$'
            elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                J_ARRAY = J_0 + (K_COEFF * A * T_ARRAY**2.0) / 2.0
                formula_label = r'$j(t) = j_0 + \frac{1}{2} K a t^2$'
            else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                J_ARRAY = J_0 + (K_COEFF * E_0 / OMEGA) * (1.0 - np.cos(OMEGA * T_ARRAY))
                formula_label = r'$j(t) = j_0 + \frac{K E_0}{\omega} (1 - \cos(\omega t))$'
        else:
            tau_T = tau_temperature_dependence(T) 
            sigma = (N_0 * E_CHARGE**2.0 * tau_T) / M_ELECTRON

            if metal_model == "–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)":
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * E_0 * (1.0 - np.exp(-T_ARRAY / tau_T))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) E_0 (1 - e^{-t/\tau(T)})$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * A * (T_ARRAY - tau_T * (1.0 - np.exp(-T_ARRAY / tau_T)))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) a [t - \tau(T)(1 - e^{-t/\tau(T)})]$'
                else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                    tau = tau_T
                    omega_tau_sq = (OMEGA * tau)**2.0
                    amp_factor = sigma * tau / np.sqrt(1.0 + omega_tau_sq)
                    phase_shift = np.arctan(OMEGA * tau)
                    J_ST_CLASSIC = E_0 * amp_factor * np.sin(OMEGA * T_ARRAY - phase_shift)
                    C = J_0 - E_0 * amp_factor * np.sin(-phase_shift)
                    J_TR_CLASSIC = C * np.exp(-T_ARRAY / tau)
                    J_ARRAY = J_TR_CLASSIC + J_ST_CLASSIC
                    formula_label = r'$j(t) = j_{\text{tr}}(t) + j_{\text{st}}(t)$'
                    
            else: # –ó–∞–∫–æ–Ω –û–º–∞
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * E_0 * np.ones_like(T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * A * T_ARRAY
                    formula_label = r'$j(t) = \sigma(T) a t$'
                else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                    J_ARRAY = sigma * E_0 * np.sin(OMEGA * T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0 \sin(\omega t)$'
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        new_run = {
            'T': T,
            'T_array': T_ARRAY * 1e9,
            'J_array': J_ARRAY,
            'formula': formula_label,
            'state': "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫" if is_superconductor else "–ú–µ—Ç–∞–ª",
            'model': "–õ–æ–Ω–¥–æ–Ω–∏" if is_superconductor else metal_model,
            'field_type': field_type,
            'time_scale': TIME_END
        }
        st.session_state.simulation_runs.append(new_run)
        st.success(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ #{len(st.session_state.simulation_runs)} –¥–æ–¥–∞–Ω–æ!")
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"):
        st.session_state.simulation_runs = []
        st.success("‚úÖ –í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—á–∏—â–µ–Ω–æ!")

# --- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –ì–†–ê–§–ò–ö–û–í ---
st.subheader("üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")

if st.session_state.simulation_runs:
    time_scale = st.session_state.simulation_runs[0]['time_scale']
    time_unit = time_scale.split()[1]
    
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
    
    for i, run in enumerate(st.session_state.simulation_runs):
        color = colors[i % len(colors)]
        
        if time_unit == "–º–∫—Å":
            time_array = run['T_array'] / 1000
        elif time_unit == "–º—Å":
            time_array = run['T_array'] / 1000000
        else:
            time_array = run['T_array']
            
        label = f"#{i+1}: {run['model']}, {run['field_type'].split(':')[0]}, T={run['T']}K"
        ax.plot(time_array, run['J_array'], color=color, linewidth=2.5, label=label)
    
    ax.set_xlabel(f'–ß–∞—Å $t$ ({time_unit})', fontsize=12)
    ax.set_ylabel('–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j$ (–ê/–º¬≤)', fontsize=12)
    ax.set_title(f'–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É ({time_scale})', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend(loc='best', fontsize=9)
    ax.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    st.pyplot(fig)

    # --- –ü–û–†–Ü–í–ù–Ø–õ–¨–ù–ê –¢–ê–ë–õ–ò–¶–Ø ---
    st.subheader("üìä –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
    
    comparison_df = create_comparison_table(st.session_state.simulation_runs)
    
    # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—ñ
    st.dataframe(
        comparison_df,
        use_container_width=True,
        hide_index=True,
        column_config={
            '‚Ññ': st.column_config.NumberColumn(width='small'),
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': st.column_config.TextColumn(width='medium'),
            '–°—Ç–∞–Ω': st.column_config.TextColumn(width='medium'),
            '–ú–æ–¥–µ–ª—å': st.column_config.TextColumn(width='large'),
            '–ü–æ–ª–µ': st.column_config.TextColumn(width='medium'),
            '–ú–∞–∫—Å. —Å—Ç—Ä—É–º': st.column_config.TextColumn(width='medium'),
            '–ö—ñ–Ω—Ü. —Å—Ç—Ä—É–º': st.column_config.TextColumn(width='medium'),
        }
    )
    
    # –ö–Ω–æ–ø–∫–∏ –µ–∫—Å–ø–æ—Ä—Ç—É
    col1, col2 = st.columns(2)
    with col1:
        csv = comparison_df.to_csv(index=False, encoding='utf-8')
        st.download_button(
            "üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ CSV",
            data=csv,
            file_name="–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è_–≥—Ä–∞—Ñ—ñ–∫—ñ–≤.csv",
            mime="text/csv"
        )
    
    with col2:
        if st.button("üìã –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑"):
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É")
            for i, run in enumerate(st.session_state.simulation_runs):
                with st.expander(f"üîç –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≥—Ä–∞—Ñ—ñ–∫–∞ #{i+1}"):
                    is_superconductor = run['state'] == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫"
                    analysis = analyze_current_direct(
                        run['T_array'], run['J_array'], 
                        run['field_type'], run['model'], is_superconductor
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä—É–º", f"{analysis['max_current']:.2e} –ê/–º¬≤")
                        st.metric("–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä—É–º", f"{analysis['min_current']:.2e} –ê/–º¬≤")
                        st.metric("–°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—Ä—É–º", f"{analysis['mean_current']:.2e} –ê/–º¬≤")
                        st.metric("–î–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω", f"{analysis['dynamic_range']:.2e} –ê/–º¬≤")
                    
                    with col2:
                        st.metric("–ß–∞—Å –¥–æ –º–∞–∫—Å–∏–º—É–º—É", f"{analysis['time_to_max']:.1f} –Ω—Å")
                        st.metric("–ö—ñ–Ω—Ü–µ–≤–∏–π —Å—Ç—Ä—É–º", f"{analysis['final_current']:.2e} –ê/–º¬≤")
                        if analysis['overshoot'] > 0:
                            st.metric("–ü–µ—Ä–µ—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è", f"{analysis['overshoot']:.2e} –ê/–º¬≤")
                        
                        if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in run['field_type'] and 'amplitude' in analysis:
                            st.metric("–ê–º–ø–ª—ñ—Ç—É–¥–∞", f"{analysis['amplitude']:.2e} –ê/–º¬≤")
                            st.metric("–ß–∞—Å—Ç–æ—Ç–∞", f"{analysis['frequency_mhz']:.1f} –ú–ì—Ü")

else:
    st.info("üëÜ –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π –≥—Ä–∞—Ñ—ñ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –≤ –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ!")

# --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---
with st.expander("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"):
    st.markdown("""
    **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
    1. –ù–∞–ª–∞—à—Ç—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤ –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ
    2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫\" –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä–∏–≤–æ—ó
    3. –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ–Ω–æ–≤–∏—Ç—å—Å—è –∑ —É—Å—ñ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ \"üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏\" –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è:**
    - **–ß–∞—Å—Ç–æ—Ç–∞:** 1-100 –∫–ì—Ü (—Ä–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è)
    - **–ê–º–ø–ª—ñ—Ç—É–¥–∞ E‚ÇÄ:** 1000-10000 –í/–º
    - **–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è:** 10-100 –º–∫—Å (–¥–ª—è –∫—ñ–ª—å–∫–æ—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤)
    
    **–ú–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ:**
    - –î–ª—è **—Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–∏—Ö** –ø–æ–ª—ñ–≤: –∞–º–ø–ª—ñ—Ç—É–¥–∞, —á–∞—Å—Ç–æ—Ç–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä—ñ–æ–¥—ñ–≤
    - –î–ª—è **–ø–æ—Å—Ç—ñ–π–Ω–∏—Ö** –ø–æ–ª—ñ–≤: —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è  
    - –î–ª—è **–ª—ñ–Ω—ñ–π–Ω–∏—Ö** –ø–æ–ª—ñ–≤: –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∏–π –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∞–±–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è
    - –î–ª—è **–≤—Å—ñ—Ö**: —á–∞—Å –¥–æ –º–∞–∫—Å–∏–º—É–º—É, –¥–∏–Ω–∞–º—ñ—á–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω
    """)
