import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import pandas as pd
from io import BytesIO
import base64

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ù—ñ–æ–±—ñ—é
e = 1.6e-19  # –ö–ª
m = 9.1e-31  # –∫–≥
Tc = 9.2  # –ö
n0 = 1.0e29  # –º‚Åª¬≥
tau_imp = 5.0e-14  # —Å
A_ph = 3.0e8  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Ñ–æ–Ω–æ–Ω–Ω–æ–≥–æ —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è

def calculate_superconducting_current(t, E_type, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    K = (e**2 * n0) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 + K * E0 * t
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 + K * (a * t**2) / 2
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        return j0 + (K * E0 / omega) * (1 - np.cos(omega * t))

def calculate_normal_current(t, E_type, T, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    ns = n0 * (1 - (T/Tc)**4)
    tau = 1 / (1/tau_imp + A_ph * T**5)
    sigma = (ns * e**2 * tau) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * E0 * tau * (1 - np.exp(-t/tau))
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * a * E0 * tau**2 * (1 - np.exp(-t/tau))
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        phase_shift = np.arctan(omega * tau)
        amplitude = (sigma * E0 * tau) / np.sqrt(1 + (omega * tau)**2)
        transient = j0 * np.exp(-t/tau)
        return transient + amplitude * np.sin(omega * t - phase_shift)

def create_pdf_report(data):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑–≤—ñ—Ç—É"""
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.pdfgen import canvas
        import io
        
        buffer = io.BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –±–∞–∑–æ–≤—ñ —à—Ä–∏—Ñ—Ç–∏
        pdf.setFont("Helvetica", 16)
        pdf.drawString(100, 800, "REPORT ON CURRENT MODELING")
        
        pdf.setFont("Helvetica", 12)
        y_position = 750
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)
        pdf.drawString(100, y_position, "Simulation Parameters:")
        y_position -= 20
        pdf.drawString(120, y_position, f"- Field type: {data['field_type']}")
        y_position -= 20
        pdf.drawString(120, y_position, f"- Field strength E: {data['E0']} V/m")
        y_position -= 20
        pdf.drawString(120, y_position, f"- Initial current j: {data['j0']} A/m2")
        y_position -= 20
        pdf.drawString(120, y_position, f"- Simulation time: {data['t_max']} s")
        y_position -= 20
        pdf.drawString(120, y_position, f"- Temperature: {data.get('T_common', data.get('T_super', data.get('T_normal', 'N/A')))} K")
        y_position -= 30
        
        # –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è (–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é)
        pdf.drawString(100, y_position, "Comparison Table:")
        y_position -= 20
        
        comparison_data = [
            ["Characteristic", "Superconductor", "Normal Metal"],
            ["Current behavior", "Unlimited growth", "Exponential saturation"],
            ["Resistance", "Absent", "Present"],
            ["Phase shift", "œÄ/2 (90¬∞)", "arctg(œâœÑ)"],
            ["Stationary state", "Not reached", "Reached (j = œÉE)"],
            ["Relaxation time", "Not important", "Key parameter"]
        ]
        
        # –ú–∞–ª—é—î–º–æ –ø—Ä–æ—Å—Ç—É —Ç–∞–±–ª–∏—Ü—é
        col_widths = [200, 150, 150]
        row_height = 20
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
        pdf.setFillColorRGB(0.8, 0.8, 1.0)  # –°–≤—ñ—Ç–ª–æ-—Å–∏–Ω—ñ–π —Ñ–æ–Ω
        pdf.rect(100, y_position - row_height, sum(col_widths), row_height, fill=1)
        pdf.setFillColorRGB(0, 0, 0)  # –ß–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
        
        x_pos = 100
        for i, header in enumerate(comparison_data[0]):
            pdf.drawString(x_pos + 5, y_position - 15, header)
            x_pos += col_widths[i]
        
        y_position -= row_height
        
        # –î–∞–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
        for row_idx, row in enumerate(comparison_data[1:]):
            if row_idx % 2 == 0:
                pdf.setFillColorRGB(0.95, 0.95, 0.95)  # –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π —Ñ–æ–Ω
            else:
                pdf.setFillColorRGB(1, 1, 1)  # –ë—ñ–ª–∏–π —Ñ–æ–Ω
            
            pdf.rect(100, y_position - row_height, sum(col_widths), row_height, fill=1)
            pdf.setFillColorRGB(0, 0, 0)  # –ß–æ—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
            
            x_pos = 100
            for i, cell in enumerate(row):
                pdf.drawString(x_pos + 5, y_position - 15, cell)
                x_pos += col_widths[i]
            
            y_position -= row_height
        
        y_position -= 20
        
        # –í–∏—Å–Ω–æ–≤–∫–∏
        pdf.drawString(100, y_position, "Conclusions:")
        y_position -= 20
        conclusion = "Comparative analysis shows fundamental difference in current dynamics between superconducting and normal states."
        pdf.drawString(120, y_position, conclusion)
        
        pdf.save()
        buffer.seek(0)
        return buffer
        
    except Exception as e:
        # –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
        buffer = BytesIO()
        report_text = f"""
        REPORT ON CURRENT MODELING
        
        Parameters:
        - Field type: {data['field_type']}
        - Field strength E: {data['E0']} V/m
        - Initial current j: {data['j0']} A/m2
        - Simulation time: {data['t_max']} s
        - Temperature: {data.get('T_common', data.get('T_super', data.get('T_normal', 'N/A')))} K
        
        Conclusions: Comparative analysis shows fundamental difference in current dynamics.
        """
        buffer.write(report_text.encode('utf-8'))
        buffer.seek(0)
        return buffer

def main():
    st.set_page_config(page_title="–ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É", layout="wide")
    st.title("üéõÔ∏è –ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É: –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ vs –∑–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª")
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Å—ñ—ó –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    if 'saved_plots' not in st.session_state:
        st.session_state.saved_plots = []
    
    # –°–∞–π–¥–±–∞—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
        
        comparison_mode = st.radio(
            "–†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
            ["–û–¥–∏–Ω —Å—Ç–∞–Ω", "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", "–ö—ñ–ª—å–∫–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"]
        )
        
        st.subheader("–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        field_type = st.selectbox("–¢–∏–ø –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–æ–≥–æ –ø–æ–ª—è:", ["–°—Ç–∞—Ç–∏—á–Ω–µ", "–õ—ñ–Ω—ñ–π–Ω–µ", "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ"])
        E0 = st.slider("–ù–∞–ø—Ä—É–∂–µ–Ω—ñ—Å—Ç—å –ø–æ–ª—è E‚ÇÄ (–í/–º)", 0.1, 10.0, 1.0, 0.1)
        j0 = st.slider("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º j‚ÇÄ (–ê/–º¬≤)", 0.0, 10.0, 0.0, 0.1)
        t_max = st.slider("–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è (—Å)", 0.1, 10.0, 5.0, 0.1)
        
        if field_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
            a = st.slider("–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ—Å—Ç—É –ø–æ–ª—è a", 0.1, 5.0, 1.0, 0.1)
        else:
            a = 1.0
            
        if field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
            omega = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ œâ (—Ä–∞–¥/—Å)", 0.1, 10.0, 1.0, 0.1)
        else:
            omega = 1.0
        
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç–∞–Ω—ñ–≤")
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            T_common = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (K)", 0.1, 15.0, 4.2, 0.1)
            current_temp = T_common
        elif comparison_mode == "–û–¥–∏–Ω —Å—Ç–∞–Ω":
            selected_state = st.radio("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω:", ["–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫", "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª"])
            if selected_state == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                T_super = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞ (K)", 0.1, Tc-0.1, 4.2, 0.1)
                current_temp = T_super
            else:
                T_normal = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É (K)", 0.1, 15.0, 4.2, 0.1)
                current_temp = T_normal
        else:
            T_multi = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (K)", 0.1, 15.0, 4.2, 0.1)
            current_temp = T_multi
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
        if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"):
            current_params = {
                'field_type': field_type,
                'E0': E0,
                'j0': j0,
                't_max': t_max,
                'label': f"{field_type}, E‚ÇÄ={E0}, T={current_temp}K"
            }
            st.session_state.saved_plots.append(current_params)
            st.success("–ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"):
            st.session_state.saved_plots = []
            st.success("–í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—á–∏—â–µ–Ω–æ!")

    # –ì—Ä–∞—Ñ—ñ–∫–∏
    st.header("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Å—Ç—Ä—É–º—É")
    t = np.linspace(0, t_max, 1000)
    fig = go.Figure()
    
    if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
        j_super = calculate_superconducting_current(t, field_type, E0, a, omega, j0)
        j_normal = calculate_normal_current(t, field_type, T_common, E0, a, omega, j0)
        fig.add_trace(go.Scatter(x=t, y=j_super, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', line=dict(color='red', width=3)))
        fig.add_trace(go.Scatter(x=t, y=j_normal, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª', line=dict(color='blue', width=3)))
        
    elif comparison_mode == "–û–¥–∏–Ω —Å—Ç–∞–Ω":
        if 'T_super' in locals():
            j_super = calculate_superconducting_current(t, field_type, E0, a, omega, j0)
            fig.add_trace(go.Scatter(x=t, y=j_super, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', line=dict(color='red', width=3)))
        else:
            j_normal = calculate_normal_current(t, field_type, T_normal, E0, a, omega, j0)
            fig.add_trace(go.Scatter(x=t, y=j_normal, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª', line=dict(color='blue', width=3)))
    
    else:
        j_super = calculate_superconducting_current(t, field_type, E0, a, omega, j0)
        j_normal = calculate_normal_current(t, field_type, T_multi, E0, a, omega, j0)
        fig.add_trace(go.Scatter(x=t, y=j_super, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ (–ø–æ—Ç–æ—á–Ω–∏–π)', line=dict(color='red', width=3)))
        fig.add_trace(go.Scatter(x=t, y=j_normal, name='–ó–≤–∏—á–∞–π–Ω–∏–π (–ø–æ—Ç–æ—á–Ω–∏–π)', line=dict(color='blue', width=3)))
        
        for i, saved_plot in enumerate(st.session_state.saved_plots):
            j_super_saved = calculate_superconducting_current(t, saved_plot['field_type'], saved_plot['E0'], a, omega, saved_plot['j0'])
            fig.add_trace(go.Scatter(x=t, y=j_super_saved, name=f'–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ {i+1}', line=dict(dash='dash')))
    
    fig.update_layout(title="–î–∏–Ω–∞–º—ñ–∫–∞ –≥—É—Å—Ç–∏–Ω–∏ —Å—Ç—Ä—É–º—É", xaxis_title="–ß–∞—Å (—Å)", yaxis_title="–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)", height=500)
    st.plotly_chart(fig, use_container_width=True)

    # –ê–Ω–∞–ª—ñ–∑ —Ç–∞ –µ–∫—Å–ø–æ—Ä—Ç
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìä –ê–Ω–∞–ª—ñ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
        st.write(f"**–¢–∏–ø –ø–æ–ª—è:** {field_type}")
        st.write(f"**E‚ÇÄ =** {E0} –í/–º")
        st.write(f"**j‚ÇÄ =** {j0} –ê/–º¬≤")
        st.write(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {current_temp} K")
        if current_temp < Tc:
            st.success("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂—á–µ T–∫—Ä–∏—Ç")
        else:
            st.warning("‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—â–µ T–∫—Ä–∏—Ç")

    with col2:
        st.header("üìÑ –ï–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
        if st.button("üì• –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF –∑–≤—ñ—Ç", use_container_width=True):
            report_data = {
                'field_type': field_type,
                'E0': E0,
                'j0': j0,
                't_max': t_max,
                'T_common': current_temp,
                'conclusion': "–ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ–∫–∞–∑—É—î —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—É —Ä—ñ–∑–Ω–∏—Ü—é —É –¥–∏–Ω–∞–º—ñ—Ü—ñ —Å—Ç—Ä—É–º—É –º—ñ–∂ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–º —Ç–∞ –∑–≤–∏—á–∞–π–Ω–∏–º —Å—Ç–∞–Ω–∞–º–∏."
            }
            
            pdf_buffer = create_pdf_report(report_data)
            st.download_button(
                label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF –∑–≤—ñ—Ç",
                data=pdf_buffer,
                file_name="–∑–≤—ñ—Ç_–º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è_—Å—Ç—Ä—É–º—É.pdf",
                mime="application/pdf",
                use_container_width=True
            )

    # –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
    st.header("üìã –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π")
    with st.expander("üéØ –†–æ–∑–≥–æ—Ä–Ω—É—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", expanded=True):
        comparison_data = {
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞": [
                "–ü–æ–≤–µ–¥—ñ–Ω–∫–∞ —Å—Ç—Ä—É–º—É –≤ —Å—Ç–∞—Ç–∏—á–Ω–æ–º—É –ø–æ–ª—ñ", 
                "–ù–∞—è–≤–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É",
                "–§–∞–∑–æ–≤–∏–π –∑—Å—É–≤ —É –∑–º—ñ–Ω–Ω–æ–º—É –ø–æ–ª—ñ", 
                "–°—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π —Å—Ç–∞–Ω",
                "–ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó",
            ],
            "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫": [
                "–ù–µ–æ–±–º–µ–∂–µ–Ω–µ –ª—ñ–Ω—ñ–π–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è",
                "–í—ñ–¥—Å—É—Ç–Ω—ñ–π", 
                "œÄ/2 (90¬∞)",
                "–ù–µ –¥–æ—Å—è–≥–∞—î—Ç—å—Å—è",
                "–ù–µ –≤–∏–∑–Ω–∞—á–∞—î –¥–∏–Ω–∞–º—ñ–∫—É —Å—Ç—Ä—É–º—É",
            ],
            "–ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω": [
                "–ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è",
                "–ü—Ä–∏—Å—É—Ç–Ω—ñ–π",
                "arctg(œâœÑ) - –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —á–∞—Å—Ç–æ—Ç–∏", 
                "–î–æ—Å—è–≥–∞—î—Ç—å—Å—è (j = œÉE)",
                "–ö–ª—é—á–æ–≤–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä",
            ]
        }
        
        df = pd.DataFrame(comparison_data)
        st.dataframe(df, use_container_width=True, hide_index=True, height=300)
        st.caption("–¢–∞–±–ª–∏—Ü—è 1: –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É –≤ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–æ–º—É —Ç–∞ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Å—Ç–∞–Ω–∞—Ö")

    # –î–æ–≤—ñ–¥–∫–∞
    st.header("üìñ –î–æ–≤—ñ–¥–∫–∞")
    col_info1, col_info2 = st.columns(2)
    
    with col_info1:
        with st.expander("üî¨ –§—ñ–∑–∏—á–Ω—ñ –æ—Å–Ω–æ–≤–∏ –º–æ–¥–µ–ª—ñ", expanded=False):
            st.write("""
            **–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω (—Ä—ñ–≤–Ω—è–Ω–Ω—è –õ–æ–Ω–¥–æ–Ω—ñ–≤):**
            - –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É
            - –ù–µ–æ–±–º–µ–∂–µ–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É –≤ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É –ø–æ–ª—ñ
            - –§–∞–∑–æ–≤–∏–π –∑—Å—É–≤ œÄ/2 —É –∑–º—ñ–Ω–Ω–æ–º—É –ø–æ–ª—ñ
            
            **–ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω (–º–æ–¥–µ–ª—å –î—Ä—É–¥–µ):**
            - –ù–∞—è–≤–Ω—ñ—Å—Ç—å –æ–ø–æ—Ä—É —á–µ—Ä–µ–∑ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
            - –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–µ –Ω–∞—Å–∏—á–µ–Ω–Ω—è —Å—Ç—Ä—É–º—É
            - –ß–∞—Å—Ç–æ—Ç–Ω–æ-–∑–∞–ª–µ–∂–Ω–∏–π —Ñ–∞–∑–æ–≤–∏–π –∑—Å—É–≤
            
            **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –ú–æ–¥–µ–ª—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, –±–ª–∏–∑—å–∫—ñ –¥–æ –Ω—ñ–æ–±—ñ—é (Tc = 9.2 K)
            """)
    
    with col_info2:
        with st.expander("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–Ω—ñ –º–æ–¥–µ–ª—ñ", expanded=False):
            st.write("""
            **–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫:** 
            ```python
            dj/dt = (e¬≤n‚Çõ/m)E(t)
            ```
            
            **–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª:** 
            ```python
            dj/dt + j/œÑ = (œÉ/œÑ)E(t)
            ```
            """)

if __name__ == "__main__":
    main()
