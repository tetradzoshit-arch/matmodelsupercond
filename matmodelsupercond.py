
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è –ù—ñ–æ–±—ñ—é
e = 1.6e-19  # –ö–ª
m = 9.1e-31  # –∫–≥
Tc = 9.2  # –ö
n0 = 1.0e29  # –º‚Åª¬≥
tau_imp = 5.0e-14  # —Å
A_ph = 3.0e8  # –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Ñ–æ–Ω–æ–Ω–Ω–æ–≥–æ —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è

def calculate_superconducting_current(t, E_type, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ K –¥–ª—è –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞
    K = (e**2 * n0) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 + K * E0 * t
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 + K * (a * t**2) / 2
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        return j0 + (K * E0 / omega) * (1 - np.cos(omega * t))

def calculate_normal_current(t, E_type, T, E0=1.0, a=1.0, omega=1.0, j0=0.0):
    """–†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç—Ä—É–º—É –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É —Å—Ç–∞–Ω—ñ"""
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω–∞ –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    ns = n0 * (1 - (T/Tc)**4)
    tau = 1 / (1/tau_imp + A_ph * T**5)
    sigma = (ns * e**2 * tau) / m
    
    if E_type == "–°—Ç–∞—Ç–∏—á–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * E0 * tau * (1 - np.exp(-t/tau))
    elif E_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
        return j0 * np.exp(-t/tau) + sigma * a * E0 * tau**2 * (1 - np.exp(-t/tau))
    elif E_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
        # –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —É—Å—Ç–∞–ª–µ–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
        phase_shift = np.arctan(omega * tau)
        amplitude = (sigma * E0 * tau) / np.sqrt(1 + (omega * tau)**2)
        transient = j0 * np.exp(-t/tau)
        return transient + amplitude * np.sin(omega * t - phase_shift)

def main():
    st.set_page_config(page_title="–ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É", layout="wide")
    st.title("üéõÔ∏è –ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É: –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ vs –∑–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª")
    
    # –°–∞–π–¥–±–∞—Ä –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
        
        # –†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        comparison_mode = st.radio(
            "–†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
            ["–û–¥–∏–Ω —Å—Ç–∞–Ω", "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"],
            help="–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–∫–∞–∂–µ –æ–±–∏–¥–≤–∞ —Å—Ç–∞–Ω–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ"
        )
        
        # –ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        st.subheader("–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        field_type = st.selectbox(
            "–¢–∏–ø –µ–ª–µ–∫—Ç—Ä–∏—á–Ω–æ–≥–æ –ø–æ–ª—è:",
            ["–°—Ç–∞—Ç–∏—á–Ω–µ", "–õ—ñ–Ω—ñ–π–Ω–µ", "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ"]
        )
        
        E0 = st.slider("–ù–∞–ø—Ä—É–∂–µ–Ω—ñ—Å—Ç—å –ø–æ–ª—è E‚ÇÄ (–í/–º)", 0.1, 10.0, 1.0, 0.1)
        j0 = st.slider("–ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º j‚ÇÄ (–ê/–º¬≤)", 0.0, 10.0, 0.0, 0.1)
        t_max = st.slider("–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è (—Å)", 0.1, 10.0, 5.0, 0.1)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–ª—è
        if field_type == "–õ—ñ–Ω—ñ–π–Ω–µ":
            a = st.slider("–®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ—Å—Ç—É –ø–æ–ª—è a", 0.1, 5.0, 1.0, 0.1)
        else:
            a = 1.0
            
        if field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ":
            omega = st.slider("–ß–∞—Å—Ç–æ—Ç–∞ œâ (—Ä–∞–¥/—Å)", 0.1, 10.0, 1.0, 0.1)
        else:
            omega = 1.0
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç–∞–Ω—ñ–≤
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å—Ç–∞–Ω—ñ–≤")
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            T_common = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è (K)", 0.1, 15.0, 4.2, 0.1)
            T_super = T_common
            T_normal = T_common
        else:
            selected_state = st.radio("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω:", ["–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫", "–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª"])
            if selected_state == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫":
                T_super = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞ (K)", 0.1, Tc-0.1, 4.2, 0.1)
                T_normal = None
            else:
                T_normal = st.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É (K)", 0.1, 15.0, 4.2, 0.1)
                T_super = None
    
    # –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìà –ì—Ä–∞—Ñ—ñ–∫–∏ —Å—Ç—Ä—É–º—É")
        
        # –ß–∞—Å–æ–≤–∞ –≤—ñ—Å—å
        t = np.linspace(0, t_max, 1000)
        
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            # –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–π —Ä–µ–∂–∏–º
            fig = make_subplots(rows=2, cols=1, 
                              subplot_titles=('–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω', '–ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω'),
                              vertical_spacing=0.1)
            
            # –ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫
            j_super = calculate_superconducting_current(t, field_type, E0, a, omega, j0)
            fig.add_trace(go.Scatter(x=t, y=j_super, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', 
                                   line=dict(color='red')), row=1, col=1)
            
            # –ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª
            j_normal = calculate_normal_current(t, field_type, T_common, E0, a, omega, j0)
            fig.add_trace(go.Scatter(x=t, y=j_normal, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª',
                                   line=dict(color='blue')), row=2, col=1)
            
            fig.update_xaxes(title_text="–ß–∞—Å (—Å)", row=2, col=1)
            fig.update_yaxes(title_text="–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)", row=1, col=1)
            fig.update_yaxes(title_text="–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)", row=2, col=1)
            fig.update_layout(height=600, showlegend=True)
            
        else:
            # –û–¥–∏–Ω —Å—Ç–∞–Ω
            fig = go.Figure()
            
            if T_super is not None:
                j_super = calculate_superconducting_current(t, field_type, E0, a, omega, j0)
                fig.add_trace(go.Scatter(x=t, y=j_super, name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫',
                                       line=dict(color='red', width=3)))
                title = "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω"
            else:
                j_normal = calculate_normal_current(t, field_type, T_normal, E0, a, omega, j0)
                fig.add_trace(go.Scatter(x=t, y=j_normal, name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª',
                                       line=dict(color='blue', width=3)))
                title = "–ó–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω"
            
            fig.update_layout(title=title, xaxis_title="–ß–∞—Å (—Å)", 
                            yaxis_title="–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)", height=400)
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.header("üìä –ê–Ω–∞–ª—ñ–∑")
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        st.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É")
        st.write(f"**–¢–∏–ø –ø–æ–ª—è:** {field_type}")
        st.write(f"**E‚ÇÄ =** {E0} –í/–º")
        st.write(f"**j‚ÇÄ =** {j0} –ê/–º¬≤")
        
        if comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            st.write(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {T_common} K")
            if T_common < Tc:
                st.success("‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∏–∂—á–µ T–∫—Ä–∏—Ç - –º–æ–∂–ª–∏–≤–∏–π –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω")
            else:
                st.warning("‚ö†Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–∏—â–µ T–∫—Ä–∏—Ç - —Ç—ñ–ª—å–∫–∏ –∑–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω")
        else:
            if T_super is not None:
                st.write(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞:** {T_super} K")
            else:
                st.write(f"**–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–µ—Ç–∞–ª—É:** {T_normal} K")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–ª—è —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
        if field_type == "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" and comparison_mode == "–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è":
            st.subheader("üì° –ê–Ω–∞–ª—ñ–∑ —á–∞—Å—Ç–æ—Ç–Ω–æ—ó –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ")
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∞–º–ø–ª—ñ—Ç—É–¥ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —á–∞—Å—Ç–æ—Ç
            frequencies = np.logspace(-1, 1, 50)  # 0.1 –¥–æ 10 —Ä–∞–¥/—Å
            amplitudes_super = []
            amplitudes_normal = []
            
            for freq in frequencies:
                # –ê–º–ø–ª—ñ—Ç—É–¥–∞ –¥–ª—è –Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫–∞
                K = (e**2 * n0) / m
                amp_super = (K * E0) / freq
                amplitudes_super.append(amp_super)
                
                # –ê–º–ø–ª—ñ—Ç—É–¥–∞ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É
                ns = n0 * (1 - (T_common/Tc)**4)
                tau = 1 / (1/tau_imp + A_ph * T_common**5)
                sigma = (ns * e**2 * tau) / m
                amp_normal = (sigma * E0 * tau) / np.sqrt(1 + (freq * tau)**2)
                amplitudes_normal.append(amp_normal)
            
            fig_freq = go.Figure()
            fig_freq.add_trace(go.Scatter(x=frequencies, y=amplitudes_super, 
                                        name='–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫', line=dict(color='red')))
            fig_freq.add_trace(go.Scatter(x=frequencies, y=amplitudes_normal,
                                        name='–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª', line=dict(color='blue')))
            fig_freq.update_layout(xaxis_title="–ß–∞—Å—Ç–æ—Ç–∞ œâ (—Ä–∞–¥/—Å)", 
                                 yaxis_title="–ê–º–ø–ª—ñ—Ç—É–¥–∞ —Å—Ç—Ä—É–º—É (–ê/–º¬≤)",
                                 xaxis_type="log", yaxis_type="log",
                                 height=300)
            st.plotly_chart(fig_freq, use_container_width=True)

if __name__ == "__main__":
    main()
