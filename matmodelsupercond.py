import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# --- –§–Ü–ó–ò–ß–ù–Ü –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –ù–Ü–û–ë–Ü–Æ ---
E_CHARGE = 1.6e-19
M_ELECTRON = 9.1e-31
N_0 = 5.0e28
T_C = 9.2
TAU_IMP = 5.0e-13
A_PHONON = 1.0e7

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---
def tau_temperature_dependence(T):
    if T <= 0.1:
        return TAU_IMP
    scattering_rate = (1 / TAU_IMP) + (A_PHONON * T**5)
    tau_T = 1.0 / scattering_rate
    return tau_T

def find_peaks_simple(signal, prominence=0.1):
    peaks = []
    max_val = np.max(signal)
    threshold = prominence * max_val
    for i in range(1, len(signal)-1):
        if signal[i] > signal[i-1] and signal[i] > signal[i+1]:
            if signal[i] > threshold:
                peaks.append(i)
    return np.array(peaks)

def analyze_current_direct(t_array, j_array, field_type, model_name, is_superconductor):
    analysis = {}
    
    # –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    analysis['max_current'] = np.max(j_array)
    analysis['min_current'] = np.min(j_array)
    analysis['mean_current'] = np.mean(j_array)
    analysis['final_current'] = j_array[-1]
    analysis['time_to_max'] = t_array[np.argmax(j_array)]
    analysis['dynamic_range'] = analysis['max_current'] - analysis['min_current']
    analysis['overshoot'] = analysis['max_current'] - analysis['final_current'] if analysis['max_current'] > analysis['final_current'] else 0
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    analysis['peaks_count'] = 0
    analysis['amplitude'] = 0
    analysis['frequency_mhz'] = 0
    analysis['settling_time'] = 0
    analysis['quadratic_coeff'] = 0
    analysis['final_growth_rate'] = 0
    
    if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in field_type:
        peaks = find_peaks_simple(j_array, prominence=0.1)
        valleys = find_peaks_simple(-j_array, prominence=0.1)
        analysis['peaks_count'] = len(peaks)
        
        if len(peaks) >= 2:
            periods = np.diff(t_array[peaks])
            period_mean = np.mean(periods)
            analysis['frequency_mhz'] = 1.0 / (period_mean * 1e-9) / 1e6 if period_mean > 0 else 0
            
            if len(valleys) > 0:
                analysis['amplitude'] = (np.max(j_array[peaks]) - np.min(j_array[valleys])) / 2
            else:
                analysis['amplitude'] = np.max(j_array[peaks])
                
    elif "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
        final_val = j_array[-1]
        if final_val != 0:
            settling_threshold = 0.02 * abs(final_val)
            for i in range(len(j_array)-1, 0, -1):
                if abs(j_array[i] - final_val) > settling_threshold:
                    analysis['settling_time'] = t_array[i+1] if i+1 < len(t_array) else t_array[-1]
                    break
    
    elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
        if is_superconductor and len(t_array) > 1 and np.max(t_array) > 0:
            t_mid = t_array[len(t_array)//2]
            j_mid = j_array[len(j_array)//2]
            if t_mid > 0:
                analysis['quadratic_coeff'] = (j_mid - j_array[0]) / (t_mid**2)
        elif len(j_array) > 10:
            last_slope = (j_array[-1] - j_array[-10]) / (t_array[-1] - t_array[-10])
            analysis['final_growth_rate'] = last_slope
    
    return analysis

def create_comparison_table(simulation_runs):
    table_data = []
    for i, run in enumerate(simulation_runs):
        is_superconductor = run['state'] == "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫"
        analysis = analyze_current_direct(run['T_array'], run['J_array'], run['field_type'], run['model'], is_superconductor)
        
        row = {
            '‚Ññ': i + 1,
            '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': f"{run['T']} K",
            '–°—Ç–∞–Ω': run['state'],
            '–ú–æ–¥–µ–ª—å': run['model'],
            '–ü–æ–ª–µ': run['field_type'].split(':')[0],
            '–ú–∞–∫—Å. —Å—Ç—Ä—É–º': f"{analysis['max_current']:.2e} –ê/–º¬≤",
            '–ö—ñ–Ω—Ü. —Å—Ç—Ä—É–º': f"{analysis['final_current']:.2e} –ê/–º¬≤",
            '–ß–∞—Å –¥–æ –º–∞–∫—Å.': f"{analysis['time_to_max']:.1f} –Ω—Å",
            '–î–∏–Ω–∞–º. –¥—ñ–∞–ø–∞–∑–æ–Ω': f"{analysis['dynamic_range']:.2e} –ê/–º¬≤",
        }
        
        if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in run['field_type']:
            row['–ê–º–ø–ª—ñ—Ç—É–¥–∞'] = f"{analysis['amplitude']:.2e} –ê/–º¬≤"
            row['–ß–∞—Å—Ç–æ—Ç–∞'] = f"{analysis['frequency_mhz']:.1f} –ú–ì—Ü"
            row['–ü–µ—Ä—ñ–æ–¥–∏'] = f"{analysis['peaks_count']}"
        elif "–ü–æ—Å—Ç—ñ–π–Ω–µ" in run['field_type']:
            row['–ß–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è'] = f"{analysis['settling_time']:.1f} –Ω—Å"
            row['–ü–µ—Ä–µ—Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è'] = f"{analysis['overshoot']:.2e} –ê/–º¬≤" if analysis['overshoot'] > 0 else "–ù–µ–º–∞—î"
        elif "–õ—ñ–Ω—ñ–π–Ω–µ" in run['field_type']:
            if is_superconductor:
                row['–ö–≤–∞–¥—Ä–∞—Ç. –∫–æ–µ—Ñ.'] = f"{analysis['quadratic_coeff']:.2e}"
            else:
                row['–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç.'] = f"{analysis['final_growth_rate']:.2e}"
        
        table_data.append(row)
    
    return pd.DataFrame(table_data)

# --- –û–°–ù–û–í–ù–ò–ô –ö–û–î ---
st.set_page_config(page_title="–ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É", layout="wide")
st.title("üî¨ –ú–û–î–ï–õ–Æ–í–ê–ù–ù–Ø –î–ò–ù–ê–ú–Ü–ö–ò –ì–£–°–¢–ò–ù–ò –°–¢–†–£–ú–£")
st.markdown("---")

if 'simulation_runs' not in st.session_state:
    st.session_state.simulation_runs = []

# --- –°–ê–ô–î–ë–ê–† ---
with st.sidebar:
    st.header("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
    
    T = st.slider("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ T (K)", 0.1, 20.0, 4.2, 0.1)
    is_superconductor = (T < T_C)
    
    if is_superconductor:
        st.success(f"‚ö° –ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω: T={T}K < T_c={T_C}K")
        N_S = N_0 * (1.0 - (T / T_C) ** 4.0)
        K_COEFF = (N_S * E_CHARGE**2) / M_ELECTRON
        st.metric("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç $K$", f"{K_COEFF:.2e} $A/(V \\cdot m \\cdot s)$")
    else:
        st.info(f"üîå –ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª: T={T}K $\\ge$ T_c={T_C}K")
        metal_model = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –º–µ—Ç–∞–ª—É:", 
                                   ["–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)", "–ó–∞–∫–æ–Ω –û–º–∞ (—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π)"])
        tau_T_current = tau_temperature_dependence(T)
        SIGMA_COEFF = (N_0 * E_CHARGE**2 * tau_T_current) / M_ELECTRON
        st.metric("–ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó $\\tau(T)$", f"{tau_T_current:.2e} —Å")
        st.metric("–ü—Ä–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å $\\sigma$", f"{SIGMA_COEFF:.2e} –°–º/–º")
    
    J_0 = st.number_input("‚û°Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≥—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j_0$ (–ê/–º¬≤)", min_value=0.0, max_value=1e11, value=0.0, step=1e6)
    
    st.subheader("üìä –¢–∏–ø –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ø–æ–ª—è")
    field_type = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ª—è:", 
                              ["–ü–æ—Å—Ç—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = E‚ÇÄ", "–õ—ñ–Ω—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = a ¬∑ t", "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ: E(t) = E‚ÇÄ ¬∑ sin(œât)"])
    
    E_0, A, OMEGA = None, None, None
    if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
        E_0 = st.number_input("E‚ÇÄ (–í/–º)", 0.0, 1e4, 5000.0, 100.0)
    elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
        A = st.number_input("–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è 'a' (–í/(–º¬∑—Å))", 1e8, 1e12, 1e10, 1e9)
    else:
        E_0 = st.number_input("–ê–º–ø–ª—ñ—Ç—É–¥–∞ E‚ÇÄ (–í/–º)", 0.0, 1e4, 5000.0, 100.0)
        F = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ f (–∫–ì—Ü)", 1, 10000, 100, 10)
        OMEGA = 2.0 * np.pi * F * 1000

    st.subheader("‚è∞ –ß–∞—Å–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª")
    TIME_END = st.selectbox("–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è", ["1 –Ω—Å", "10 –Ω—Å", "100 –Ω—Å", "1 –º–∫—Å", "10 –º–∫—Å", "100 –º–∫—Å", "1 –º—Å"], index=4)
    time_dict = {"1 –Ω—Å": 1e-9, "10 –Ω—Å": 10e-9, "100 –Ω—Å": 100e-9, "1 –º–∫—Å": 1e-6, "10 –º–∫—Å": 10e-6, "100 –º–∫—Å": 100e-6, "1 –º—Å": 1e-3}
    T_END_UNIFIED = time_dict[TIME_END]

    st.subheader("üìà –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏")
    
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"):
        T_ARRAY = np.linspace(0.0, T_END_UNIFIED, 1000)
        J_ARRAY = np.zeros_like(T_ARRAY)
        formula_label = ""
        
        if is_superconductor:
            if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                J_ARRAY = J_0 + K_COEFF * E_0 * T_ARRAY
                formula_label = r'$j(t) = j_0 + K E_0 t$'
            elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                J_ARRAY = J_0 + (K_COEFF * A * T_ARRAY**2.0) / 2.0
                formula_label = r'$j(t) = j_0 + \frac{1}{2} K a t^2$'
            else:
                J_ARRAY = J_0 + (K_COEFF * E_0 / OMEGA) * (1.0 - np.cos(OMEGA * T_ARRAY))
                formula_label = r'$j(t) = j_0 + \frac{K E_0}{\omega} (1 - \cos(\omega t))$'
        else:
            tau_T = tau_temperature_dependence(T)
            sigma = (N_0 * E_CHARGE**2.0 * tau_T) / M_ELECTRON

            if metal_model == "–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)":
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * E_0 * (1.0 - np.exp(-T_ARRAY / tau_T))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) E_0 (1 - e^{-t/\tau(T)})$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * A * (T_ARRAY - tau_T * (1.0 - np.exp(-T_ARRAY / tau_T)))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) a [t - \tau(T)(1 - e^{-t/\tau(T)})]$'
                else:
                    tau = tau_T
                    omega_tau_sq = (OMEGA * tau)**2.0
                    amp_factor = sigma * tau / np.sqrt(1.0 + omega_tau_sq)
                    phase_shift = np.arctan(OMEGA * tau)
                    J_ST_CLASSIC = E_0 * amp_factor * np.sin(OMEGA * T_ARRAY - phase_shift)
                    C = J_0 - E_0 * amp_factor * np.sin(-phase_shift)
                    J_TR_CLASSIC = C * np.exp(-T_ARRAY / tau)
                    J_ARRAY = J_TR_CLASSIC + J_ST_CLASSIC
                    formula_label = r'$j(t) = j_{\text{tr}}(t) + j_{\text{st}}(t)$'
            else:
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * E_0 * np.ones_like(T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * A * T_ARRAY
                    formula_label = r'$j(t) = \sigma(T) a t$'
                else:
                    J_ARRAY = sigma * E_0 * np.sin(OMEGA * T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0 \sin(\omega t)$'
        
        new_run = {
            'T': T, 'T_array': T_ARRAY * 1e9, 'J_array': J_ARRAY, 'formula': formula_label,
            'state': "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫" if is_superconductor else "–ú–µ—Ç–∞–ª",
            'model': "–õ–æ–Ω–¥–æ–Ω–∏" if is_superconductor else metal_model,
            'field_type': field_type, 'time_scale': TIME_END
        }
        st.session_state.simulation_runs.append(new_run)
        st.success(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ #{len(st.session_state.simulation_runs)} –¥–æ–¥–∞–Ω–æ!")
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"):
        st.session_state.simulation_runs = []
        st.success("‚úÖ –í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—á–∏—â–µ–Ω–æ!")

# --- –í–Ü–ó–£–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
st.subheader("üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")

if st.session_state.simulation_runs:
    time_scale = st.session_state.simulation_runs[0]['time_scale']
    time_unit = time_scale.split()[1]
    
    fig, ax = plt.subplots(figsize=(12, 6))
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
    
    for i, run in enumerate(st.session_state.simulation_runs):
        color = colors[i % len(colors)]
        
        if time_unit == "–º–∫—Å":
            time_array = run['T_array'] / 1000
        elif time_unit == "–º—Å":
            time_array = run['T_array'] / 1000000
        else:
            time_array = run['T_array']
            
        label = f"#{i+1}: {run['model']}, {run['field_type'].split(':')[0]}, T={run['T']}K"
        ax.plot(time_array, run['J_array'], color=color, linewidth=2.5, label=label)
    
    ax.set_xlabel(f'–ß–∞—Å $t$ ({time_unit})', fontsize=12)
    ax.set_ylabel('–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j$ (–ê/–º¬≤)', fontsize=12)
    ax.set_title(f'–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ —Å—Ç—Ä—É–º—É ({time_scale})', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.legend(loc='best', fontsize=9)
    ax.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    st.pyplot(fig)

    # --- –¢–ê–ë–õ–ò–¶–Ø ---
    st.subheader("üìä –ü–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
    comparison_df = create_comparison_table(st.session_state.simulation_runs)
    st.dataframe(comparison_df, use_container_width=True, hide_index=True)
    
    csv = comparison_df.to_csv(index=False, encoding='utf-8')
    st.download_button("üì• –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é –≤ CSV", data=csv, file_name="–ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è_–≥—Ä–∞—Ñ—ñ–∫—ñ–≤.csv", mime="text/csv")

else:
    st.info("üëÜ –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π –≥—Ä–∞—Ñ—ñ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –≤ –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ!")

with st.expander("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"):
    st.markdown("""
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è:**
    - **–ß–∞—Å—Ç–æ—Ç–∞:** 1-100 –∫–ì—Ü
    - **–ê–º–ø–ª—ñ—Ç—É–¥–∞ E‚ÇÄ:** 1000-10000 –í/–º  
    - **–ß–∞—Å –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è:** 10-100 –º–∫—Å
    """)
    # –î–æ–¥–∞–π —Ü–µ–π –∫–æ–¥ –Ω–∞ —Ä—è–¥–æ–∫ 270
st.write("üîç **–î–ï–ë–ê–ì:**")
tau_T_debug = tau_temperature_dependence(T)
sigma_debug = (N_0 * E_CHARGE**2.0 * tau_T_debug) / M_ELECTRON
st.write(f"tau_T = {tau_T_debug:.2e} —Å")
st.write(f"sigma = {sigma_debug:.2e} –°–º/–º")
st.write(f"E_0 = {E_0} –í/–º")
st.write(f"–û—á—ñ–∫—É–≤–∞–Ω–∏–π —Å—Ç—Ä—É–º = {sigma_debug * E_0:.2e} –ê/–º¬≤")
st.write(f"–§–∞–∫—Ç–∏—á–Ω–∏–π —Å—Ç—Ä—É–º = {np.max(J_ARRAY):.2e} –ê/–º¬≤")

# –¢—ñ–ª—å–∫–∏ –¥–ª—è —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in field_type:
    st.write(f"OMEGA = {OMEGA:.2e} —Ä–∞–¥/—Å")
