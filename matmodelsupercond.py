import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# --- –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(page_title="–ú–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–º—É", layout="wide")
st.title("üî¨ –ú–û–î–ï–õ–Æ–í–ê–ù–ù–Ø –î–ò–ù–ê–ú–Ü–ö–ò –ì–£–°–¢–ò–ù–ò –°–¢–†–£–ú–£")
st.markdown("---")

# --- –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ö–û–ù–°–¢–ê–ù–¢–´ ---
E_CHARGE = 1.6e-19       # –ó–∞—Ä—è–¥ –µ–ª–µ–∫—Ç—Ä–æ–Ω–∞, –ö–ª
M_ELECTRON = 9.1e-31     # –ú–∞—Å–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–∞, –∫–≥
N_0 = 1.0e29             # –ó–∞–≥–∞–ª—å–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–≤, –º‚Åª¬≥
T_C = 9.2                # –ö—Ä–∏—Ç–∏—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–¥–ª—è Nb), –ö

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —á–∞—Å—É —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó (–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É T >= T_C)
TAU_IMP = 5.0e-14        # –ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó –ø—Ä–∏ T->0 (—Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è –Ω–∞ –¥–æ–º—ñ—à–∫–∞—Ö), —Å
A_PHONON = 3.0e8         # –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –¥–ª—è —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è –Ω–∞ —Ñ–æ–Ω–æ–Ω–∞—Ö (T^5 –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å)

# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---

def tau_temperature_dependence(T):
    """
    –†–æ–∑—Ä–∞—Ö–æ–≤—É—î —á–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó tau(T) –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É
    –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–∞–≤–∏–ª–∞ –ú–∞—Ç—Ç—ñ—Å—Å–µ–Ω–∞: 1/tau = 1/tau_imp + 1/tau_phonon
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è T^5 –∑–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –¥–ª—è —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è –Ω–∞ —Ñ–æ–Ω–æ–Ω–∞—Ö (–Ω–∏–∑—å–∫—ñ T).
    """
    if T <= 0.1: # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å —ñ –¥–ª—è T->0
        return TAU_IMP
        
    # –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä–æ–∑—Å—ñ—é–≤–∞–Ω–Ω—è (1/tau)
    scattering_rate = (1 / TAU_IMP) + (A_PHONON * T**5)
    
    # –ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó
    tau_T = 1.0 / scattering_rate
    return tau_T

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ---
if 'simulation_runs' not in st.session_state:
    st.session_state.simulation_runs = []

# --- –°–ê–ô–î–ë–ê–† –î–õ–Ø –í–í–û–î–ê –ü–ê–†–ê–ú–ï–¢–†–û–í ---
with st.sidebar:
    st.header("üéõÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è")
    
    # –í–∏–±—ñ—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    T = st.slider("üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ T (K)", 0.1, 20.0, 4.2, 0.1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_superconductor = (T < T_C)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–∞–ª—É
    metal_model = None
    if is_superconductor:
        st.success(f"‚ö° –ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–π —Å—Ç–∞–Ω: T={T}K < T_c={T_C}K")
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –õ–æ–Ω–¥–æ–Ω—ñ–≤ K
        N_S = N_0 * (1.0 - (T / T_C) ** 4.0) # –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ float –¥–ª—è —Å—Ç–µ–ø–µ–Ω—ñ–≤
        K_COEFF = (N_S * E_CHARGE**2) / M_ELECTRON
        st.metric("–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç $K$", f"{K_COEFF:.2e} $A/(V \\cdot m \\cdot s)$")
    else:
        st.info(f"üîå –ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª: T={T}K $\\ge$ T_c={T_C}K")
        
        # --- –ù–û–í–ò–ô –í–ò–ë–Ü–† –ú–û–î–ï–õ–Ü ---
        metal_model = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –º–µ—Ç–∞–ª—É:", 
                                   ["–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)", 
                                    "–ó–∞–∫–æ–Ω –û–º–∞ (—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π)"])

        # –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–û –ó–ê–õ–ï–ñ–ù–û–ì–û TAU
        tau_T_current = tau_temperature_dependence(T)
        SIGMA_COEFF = (N_0 * E_CHARGE**2 * tau_T_current) / M_ELECTRON
        
        st.metric("–ß–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó $\\tau(T)$", f"{tau_T_current:.2e} —Å")
        st.metric("–ü—Ä–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å $\\sigma$", f"{SIGMA_COEFF:.2e} –°–º/–º")
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫
    J_0 = st.number_input("‚û°Ô∏è –ü–æ—á–∞—Ç–∫–æ–≤–∞ –≥—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j_0$ (–ê/–º¬≤)", 
                          min_value=0.0, max_value=1e11, value=0.0, step=1e6)
    
    # –¢–∏–ø –ø–æ–ª—è
    st.subheader("üìä –¢–∏–ø –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ø–æ–ª—è")
    field_type = st.selectbox("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–æ–ª—è:", 
                              ["–ü–æ—Å—Ç—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = E‚ÇÄ", 
                               "–õ—ñ–Ω—ñ–π–Ω–µ –ø–æ–ª–µ: E(t) = a ¬∑ t", 
                               "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ: E(t) = E‚ÇÄ ¬∑ sin(œât)"])
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–ª—è (–≤—Å—ñ —è–≤–Ω—ñ —á–∏—Å–ª–∞ —î float)
    E_0, A, OMEGA = None, None, None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
        E_0 = st.number_input("E‚ÇÄ (–í/–º)", 0.0, 1e4, 1e3, 100.0)
    elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
        A = st.number_input("–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è 'a' (–í/(–º¬∑—Å))", 1e8, 1e12, 1e10, 1e9)
    else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
        E_0 = st.number_input("–ê–º–ø–ª—ñ—Ç—É–¥–∞ E‚ÇÄ (–í/–º)", 0.0, 1e4, 1e3, 100.0)
        F = st.number_input("–ß–∞—Å—Ç–æ—Ç–∞ f (–ì—Ü)", 1e6, 1e9, 1e7, 1e6)
        OMEGA = 2.0 * np.pi * F # –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ float

    # --- –ö–ù–û–ü–ö–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–ê–ú–ò ---
    st.subheader("üìà –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏") 
    if st.button("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"):
        # –†–æ–∑–º—ñ—Ä–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        if "–°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ" in field_type and not is_superconductor:
            # –î–ª—è —Å–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –≤ –º–µ—Ç–∞–ª—ñ - –ø–æ–∫–∞–∑—É—î–º–æ –∫—ñ–ª—å–∫–∞ –ø–µ—Ä—ñ–æ–¥—ñ–≤
            T_END = 3 * (2.0 * np.pi / OMEGA)  # 3 –ø–µ—Ä—ñ–æ–¥–∏
        else:
            T_END = 1e-9  # 1 –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–∞ –¥–ª—è —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    
    T_ARRAY = np.linspace(0.0, T_END, 1000)
    J_ARRAY = np.zeros_like(T_ARRAY)
    formula_label
        
        # --- –†–û–ó–†–ê–•–£–ù–û–ö –°–¢–†–£–ú–£ ---
        if is_superconductor:
            # –†—ñ–≤–Ω—è–Ω–Ω—è –õ–æ–Ω–¥–æ–Ω—ñ–≤: dj/dt = K * E(t)
            # –§–û–†–ú–£–õ–ò: j(t)=j_0+KE_0 t, j(t)=j_0+K (at^2)/2, j(t)=j_0+(KŒï_0)/œâ(1-cos‚Å°(œât))
            if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                # 1. j(t)=j_0+KE_0 t
                J_ARRAY = J_0 + K_COEFF * E_0 * T_ARRAY
                formula_label = r'$j(t) = j_0 + K E_0 t$'
            elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                # 2. j(t)=j_0+K (at^2)/2
                J_ARRAY = J_0 + (K_COEFF * A * T_ARRAY**2.0) / 2.0
                formula_label = r'$j(t) = j_0 + \frac{1}{2} K a t^2$'
            else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                # 3. j(t)=j_0+(KŒï_0)/œâ(1-cos‚Å°(œât))
                J_ARRAY = J_0 + (K_COEFF * E_0 / OMEGA) * (1.0 - np.cos(OMEGA * T_ARRAY))
                formula_label = r'$j(t) = j_0 + \frac{K E_0}{\omega} (1 - \cos(\omega t))$'
        else:
            # –ó–í–ò–ß–ê–ô–ù–ò–ô –ú–ï–¢–ê–õ
            tau_T = tau_temperature_dependence(T) 
            sigma = (N_0 * E_CHARGE**2.0 * tau_T) / M_ELECTRON

            if metal_model == "–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º)":
                # –ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ: dj/dt + j/œÑ(T) = œÉ(T)/œÑ(T) * E(t)
                
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    # j(t)=j_0 e^((-t)/œÑ)+œÉŒïœÑ(1-e^((-t)/œÑ))
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * E_0 * tau_T * (1.0 - np.exp(-T_ARRAY / tau_T)) / tau_T
                    # –°–ø—Ä–æ—â–µ–Ω–Ω—è –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ—ó —Ñ–æ—Ä–º—É–ª–∏ (–∑ –∫–æ–¥—É): j(t)=j_0 e^((-t)/œÑ)+œÉŒï_0 (1-e^((-t)/œÑ))
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * E_0 * (1.0 - np.exp(-T_ARRAY / tau_T))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) E_0 (1 - e^{-t/\tau(T)})$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    #—Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è E(t)=at: j(t) = j_0 e^{-t/\tau} + \sigma a [t - \tau(1 - e^{-t/\tau})]
                    J_ARRAY = J_0 * np.exp(-T_ARRAY / tau_T) + sigma * A * (T_ARRAY - tau_T * (1.0 - np.exp(-T_ARRAY / tau_T)))
                    formula_label = r'$j(t) = j_0 e^{-t/\tau(T)} + \sigma(T) a [t - \tau(T)(1 - e^{-t/\tau(T)})]$'
                else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                    # –ö–û–†–ï–ö–¢–ù–ê —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –º–æ–¥–µ–ª—ñ –î
                    tau = tau_T
                    omega_tau_sq = (OMEGA * tau)**2.0
    
                    # –ê–º–ø–ª—ñ—Ç—É–¥–∞ —ñ —Ñ–∞–∑–∞ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
                    amp_factor = sigma * tau / np.sqrt(1.0 + omega_tau_sq)  # –î–û–î–ê–ù–û tau!
                    phase_shift = np.arctan(OMEGA * tau)
                    J_ST_CLASSIC = E_0 * amp_factor * np.sin(OMEGA * T_ARRAY - phase_shift)
    
                    # –ü–µ—Ä–µ—Ö—ñ–¥–Ω–∞ —Å–∫–ª–∞–¥–æ–≤–∞
                    C = J_0 - E_0 * amp_factor * np.sin(-phase_shift)
                    J_TR_CLASSIC = C * np.exp(-T_ARRAY / tau)
    
                    J_ARRAY = J_TR_CLASSIC + J_ST_CLASSIC
    
                    formula_label = r'$j(t) = j_{\text{tr}}(t) + j_{\text{st}}(t)$'
                    
            else: # –ó–∞–∫–æ–Ω –û–º–∞ (—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π)
                # –ó–∞–∫–æ–Ω –û–º–∞: j(t) = œÉ(T) * E(t). j‚ÇÄ —ñ–≥–Ω–æ—Ä—É—î—Ç—å—Å—è.
                if "–ü–æ—Å—Ç—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * E_0 * np.ones_like(T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0$'
                elif "–õ—ñ–Ω—ñ–π–Ω–µ" in field_type:
                    J_ARRAY = sigma * A * T_ARRAY
                    formula_label = r'$j(t) = \sigma(T) a t$'
                else:  # –°–∏–Ω—É—Å–æ—ó–¥–∞–ª—å–Ω–µ
                    J_ARRAY = sigma * E_0 * np.sin(OMEGA * T_ARRAY)
                    formula_label = r'$j(t) = \sigma(T) E_0 \sin(\omega t)$'
            
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        new_run = {
            'T': T,
            'T_array': T_ARRAY * 1e9,  # —á–∞—Å –≤ –Ω—Å
            'J_array': J_ARRAY,
            'formula': formula_label,
            'state': "–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫" if is_superconductor else "–ú–µ—Ç–∞–ª",
            'model': "–õ–æ–Ω–¥–æ–Ω–∏" if is_superconductor else metal_model,
            'field_type': field_type
        }
        st.session_state.simulation_runs.append(new_run)
        st.success(f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ #{len(st.session_state.simulation_runs)} –¥–æ–¥–∞–Ω–æ!")
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏"):
        st.session_state.simulation_runs = []
        st.success("‚úÖ –í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ –æ—á–∏—â–µ–Ω–æ!")

# --- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –ì–†–ê–§–ò–ö–û–í ---
st.subheader("üìà –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")

if st.session_state.simulation_runs:
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞
    fig, ax = plt.subplots(figsize=(12, 6))
    
    # –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b']
    
    # –†–∏—Å—É—î–º–æ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏
    for i, run in enumerate(st.session_state.simulation_runs):
        color = colors[i % len(colors)]
        label = f"#{i+1}: T={run['T']}K ({run['model']}), –ü–æ–ª–µ: {run['field_type'].split(':')[0]}"
        ax.plot(run['T_array'], run['J_array'], 
                color=color, linewidth=2.5, label=label)
    
    ax.set_xlabel('–ß–∞—Å $t$ (–Ω—Å)', fontsize=12)
    ax.set_ylabel('–ì—É—Å—Ç–∏–Ω–∞ —Å—Ç—Ä—É–º—É $j$ (${\\text{A}}/{\\text{–º}^2}$)', fontsize=12)
    ax.set_title('–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –≥—É—Å—Ç–∏–Ω–∏ —Å—Ç—Ä—É–º—É', fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.7)
    ax.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
    ax.legend(loc='upper right', fontsize=10)
    
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –≤ Streamlit
    st.pyplot(fig)
    
    # --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–ê–§–ò–ö–ê–• ---
    st.subheader("üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä–∞—Ñ—ñ–∫–∏")
    for i, run in enumerate(st.session_state.simulation_runs):
        with st.expander(f"–ì—Ä–∞—Ñ—ñ–∫ #{i+1}: T={run['T']}K ({run['model']}) | –ü–æ–ª–µ: {run['field_type'].split(':')[0]}"):
            st.latex(run['formula'])
            st.markdown(f"**–°—Ç–∞–Ω:** {run['state']}")
            st.markdown(f"**–ú–æ–¥–µ–ª—å:** {run['model']}")
            st.markdown(f"**–¢–∏–ø –ø–æ–ª—è:** {run['field_type']}")
            st.metric("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Å—Ç—Ä—É–º", f"{np.max(run['J_array']):.2e} –ê/–º¬≤")
else:
    st.info("üëÜ –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä—à–∏–π –≥—Ä–∞—Ñ—ñ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –∫–Ω–æ–ø–∫—É –≤ –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ!")

# --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---
with st.expander("‚ÑπÔ∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"):
    st.markdown("""
    **–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è:**
    1. **–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏** (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç—Ä—É–º, —Ç–∏–ø –ø–æ–ª—è) –≤ –±–æ–∫–æ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ.
    2. –Ø–∫—â–æ $T \ge T_c$, –æ–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å: **–î—Ä—É–¥–µ** (–∑ –ø–µ—Ä–µ—Ö—ñ–¥–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º) –∞–±–æ **–û–º–∞** (—Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–∏–π).
    3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å **\"‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫\"** –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫.
    4. **–ó–º—ñ–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏** —ñ –¥–æ–¥–∞–π—Ç–µ —â–µ –≥—Ä–∞—Ñ—ñ–∫–∏ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –≤ —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∂–∏–º–∞—Ö (–Ω–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫ vs. –º–µ—Ç–∞–ª).
    5. –í–∏–¥–∞–ª—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫–∏ –∫–Ω–æ–ø–∫–æ—é **\"üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏\"**.
    
    **–ü–æ—Ä–∞–¥–∞:** –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ (—è–∫–∞ –º–∞—î –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è) —Ç–∞ –ó–∞–∫–æ–Ω –û–º–∞ (—è–∫–∏–π –º–∏—Ç—Ç—î–≤–æ –¥–æ—Å—è–≥–∞—î —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è) –ø—Ä–∏ $T=15K$ —ñ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É –ø–æ–ª—ñ.
    """)
# --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø ---
with st.expander("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞"):
    st.markdown("""
    **–§—ñ–∑–∏—á–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏:**
    - **–ù–∞–¥–ø—Ä–æ–≤—ñ–¥–Ω–∏–∫** ($T < T_c$): –î–∏–Ω–∞–º—ñ–∫–∞ –æ–ø–∏—Å—É—î—Ç—å—Å—è **–†—ñ–≤–Ω—è–Ω–Ω—è–º–∏ –õ–æ–Ω–¥–æ–Ω—ñ–≤**. –°—Ç—Ä—É–º –º–æ–∂–µ –∑—Ä–æ—Å—Ç–∞—Ç–∏ –ª—ñ–Ω—ñ–π–Ω–æ –∞–±–æ –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–æ –≤ —á–∞—Å—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –æ–ø—ñ—Ä –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é.
    - **–ó–≤–∏—á–∞–π–Ω–∏–π –º–µ—Ç–∞–ª** ($T \ge T_c$):
        - **–ú–æ–¥–µ–ª—å –î—Ä—É–¥–µ:** –í—Ä–∞—Ö–æ–≤—É—î —ñ–Ω–µ—Ä—Ü—ñ—é –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–≤ —Ç–∞ —á–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó $\\tau(T)$, —â–æ –ø—Ä–∏–∑–≤–æ–¥–∏—Ç—å –¥–æ –ø–ª–∞–≤–Ω–æ–≥–æ (–µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–æ–≥–æ) –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç—Ä—É–º—É –¥–æ —Å—Ç–∞—Ü—ñ–æ–Ω–∞—Ä–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è $\\sigma(T)E_0$.
        - **–ó–∞–∫–æ–Ω –û–º–∞:** –ü—Ä–∏–ø—É—Å–∫–∞—î, —â–æ —Å—Ç—Ä—É–º –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –º–∏—Ç—Ç—î–≤–æ, —Ç–æ–±—Ç–æ $j(t) = \sigma(T)E(t)$. –¶–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è —î –∫–æ—Ä–µ–∫—Ç–Ω–∏–º, –∫–æ–ª–∏ —á–∞—Å —Ä–µ–ª–∞–∫—Å–∞—Ü—ñ—ó $\\tau(T)$ –Ω–∞–±–∞–≥–∞—Ç–æ –º–µ–Ω—à–∏–π –∑–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∏–π —á–∞—Å –∑–º—ñ–Ω–∏ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ø–æ–ª—è.
    
    **–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–¥—ñ–±–Ω—ñ –¥–æ –ù—ñ–æ–±—ñ—é ($\text{Nb}$).**
    """)
